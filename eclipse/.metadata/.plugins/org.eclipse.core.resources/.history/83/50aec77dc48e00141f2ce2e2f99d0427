package paas.markup.sendreceive;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import paas.sendreceive.IORequest;
import paas.sendreceive.Request;

public class MarkupIORequest extends IORequest {

	private HashMap<String,String> _properties=new HashMap<String, String>();
	private Set<String> propertyNames(){
		return this._properties.keySet();
	}
	
	public String property(String propName){
		String property=this._properties.get(propName.toLowerCase());
		return property==null?"":property;
	}
	
	public void setProperty(String propName,String value){
		this._properties.put(propName.toLowerCase(), value==null?"":value.trim());
	}
	
	public void setProperties(String...properties){
		if(properties!=null){
			if(properties.length>0){
				if(properties.length==1&&properties[0].indexOf("|")>-1){
					properties=properties[0].split("[|]");
				}
				for(String prop:properties){
					if(prop.indexOf("=")>-1){
						this.setProperty(prop.substring(0,prop.indexOf("=")).trim(), prop.substring(prop.indexOf("=")+1).trim());
					}
				}
			}
		}
	}
	
	public MarkupIORequest(InputStream input, OutputStream output) throws Exception {
		this(null,input,output);
	}
	
	public MarkupIORequest(Request parentRequest,InputStream input, OutputStream output) throws Exception {
		super(parentRequest,input, output);
	}

	private long _requiredContentLength=0;
	private long _outstandingContentLength=0;
	
	public enum MarkupIORequestStage{
		command,
		url,
		protocol,
		headers,
		content
	}
	
	private MarkupIORequestStage _markupIORequestStage=MarkupIORequestStage.command;
	
	@Override
	public IORequestStage readBytes(byte[] bytesRead, boolean doneReading) throws Exception{
		if(bytesRead==null){
			return super.readBytes(bytesRead, true);
		}
		else if(bytesRead.length==0){
			return super.readBytes(bytesRead, true);
		}
		else{
			for(byte b:bytesRead){
				readByteChar(b, (char)b);
			}
			if(this._markupContentDecodeStage==MarkupContentDecodeStage.urlformencode){
				this.decodeUrlFormEncodedContent((byte)'&', '&');
			}
		}
		
		return super.readBytes(bytesRead, _requiredContentLength==_requiredContentLength);
	}
	
	private ArrayList<byte[]> _markupResponseBytes=new ArrayList<byte[]>();
	private long _markupResponseLength=0;
	@Override
	public boolean respondBytes(byte[] bytes) {
		if(super.respondBytes(bytes)){
			((MarkupIORequest)(this.parentRequest()==null?this:this.parentRequest()))._markupResponseLength+=bytes.length;
			((MarkupIORequest)(this.parentRequest()==null?this:this.parentRequest()))._markupResponseBytes.add(bytes);
			return true;
		}
		return false;
	}
	
	private StringBuilder _markupHeaderContentBuilder=new StringBuilder();
	private enum MarkupContentDecodeStage{
		multipart,
		urlformencode,
		custom
	}
	
	private MarkupContentDecodeStage _markupContentDecodeStage=MarkupContentDecodeStage.custom;
	
	private void readByteChar(byte b,char c) throws Exception{
		switch (_markupIORequestStage) {
		case command:
				switch (c) {
				case ' ':
						this.setCommand(this._markupHeaderContentBuilder.substring(0,this._markupHeaderContentBuilder.length()));
						this._markupHeaderContentBuilder.setLength(0);
						this._markupIORequestStage=MarkupIORequestStage.url;
					break;
				default:
						this._markupHeaderContentBuilder.append(c);
					break;
				}
			break;
		case content:
			switch (_markupContentDecodeStage) {
			case custom:
				break;
			case multipart:
				this.decodeMultipartContent(b, c);
				break;
			case urlformencode:
				this.decodeUrlFormEncodedContent(b, c);
				break;
			}
			break;
		case headers:
				switch(c){
				case 10:
					if(this._markupHeaderContentBuilder.length()==0){
						this._markupIORequestStage=MarkupIORequestStage.content;
					}
					else{
						if(this._markupHeaderContentBuilder.indexOf(":")>-1){
							this.setRequestHeader(this._markupHeaderContentBuilder.substring(0,this._markupHeaderContentBuilder.indexOf(":")).trim(), this._markupHeaderContentBuilder.substring(this._markupHeaderContentBuilder.indexOf(":")+1,this._markupHeaderContentBuilder.length()).trim());
						}
						if(this.requestHeaderNames().contains("CONTENT-LENGTH")){
							this._requiredContentLength=Long.parseLong(this.requestHeader("CONTENT-LENGTH"));
						}
						if(this.requestHeaderNames().contains("CONTENT-TYPE")){
							if(this.requestHeader("CONTENT-TYPE").indexOf("form-urlencoded")>-1){//form-urlencoded
								_markupContentDecodeStage=MarkupContentDecodeStage.urlformencode;
								_urlEncParam.setLength(0);
							}
							else if(this.requestHeader("CONTENT-TYPE").indexOf("multipart/form-data")>-1){//multipart/form-data
								_markupContentDecodeStage=MarkupContentDecodeStage.multipart;
							}
						}
						
						this._markupHeaderContentBuilder.setLength(0);
					}
					break;
				case 13:return;
				default:
					this._markupHeaderContentBuilder.append(c);
					break;
				}
			break;
		case protocol:
				switch(c){
				case 10:
							this.setProtocol(this._markupHeaderContentBuilder.substring(0,this._markupHeaderContentBuilder.length()));
							this._markupHeaderContentBuilder.setLength(0);
							this._markupIORequestStage=MarkupIORequestStage.headers;
						break;
				case 13:return;
				default:
					this._markupHeaderContentBuilder.append(c);
				}
			break;
		case url:
				switch(c){
				case ' ':
						this.setUrl(this._markupHeaderContentBuilder.indexOf("?")>-1?this._markupHeaderContentBuilder.substring(0,this._markupHeaderContentBuilder.indexOf("?")):this._markupHeaderContentBuilder.substring(0,this._markupHeaderContentBuilder.length()));
						if(this._markupHeaderContentBuilder.indexOf("?")>-1){
							this._markupHeaderContentBuilder.delete(0, this._markupHeaderContentBuilder.indexOf("?")+1);
							decodeUrlEncodedParams(this._markupHeaderContentBuilder.substring(0,this._markupHeaderContentBuilder.length()),	this);
						}
						this._markupHeaderContentBuilder.setLength(0);
						this._markupIORequestStage=MarkupIORequestStage.protocol;
					break;
				default:
						this._markupHeaderContentBuilder.append(c);
					break;
				}
			break;
		}
	}
	
	private StringBuilder _urlEncParam=new StringBuilder();
	private void decodeUrlFormEncodedContent(byte b, char c) throws Exception{
		switch (c) {
		case '&':
			if(_urlEncParam.length()>0){
				if(_urlEncParam.indexOf("=")>-1){
					if(!(_urlEncParam.substring(0,_urlEncParam.indexOf("=")).trim().equals(""))){
						try {
							this.setParameter(URLDecoder.decode(_urlEncParam.substring(0,_urlEncParam.indexOf("=")).trim(),"UTF-8"),URLDecoder.decode(_urlEncParam.substring(_urlEncParam.indexOf("=")+1,_urlEncParam.length()).trim(),"UTF-8"),false);
						} catch (UnsupportedEncodingException e) {
						}
					}
				}
				_urlEncParam.setLength(0);
			}
			break;
		default:
			_urlEncParam.append(c);
			break;
		}
	}
	
	public void decodeCustomContent(byte b, char c) throws Exception{
	}
	

	public static void decodeUrlEncodedParams(String urlEncodedString,Request request){
		if(urlEncodedString==null){
			return;
		}
		if((urlEncodedString=urlEncodedString.trim()).equals("")){
			return;
		}
		urlEncodedString+="&";
		StringBuilder urlEncParam=new StringBuilder();
		
		for(char c:urlEncodedString.toCharArray()){
			switch(c){
			case '&':
				if(urlEncParam.length()>0){
					if(urlEncParam.indexOf("=")>-1){
						if(!(urlEncParam.substring(0,urlEncParam.indexOf("=")).trim().equals(""))){
							try {
								request.setParameter(URLDecoder.decode(urlEncParam.substring(0,urlEncParam.indexOf("=")).trim(),"UTF-8"),URLDecoder.decode(urlEncParam.substring(urlEncParam.indexOf("=")+1,urlEncParam.length()).trim(),"UTF-8"),false);
							} catch (UnsupportedEncodingException e) {
							}
						}
					}
					urlEncParam.setLength(0);
				}
				break;
			default:
				urlEncParam.append(c);	
				break;
			}
		}
		
		urlEncParam.setLength(0);
		urlEncParam=null;
		urlEncodedString=null;
	}
	
	@Override
	public void resetRequest() throws Exception {
		this.resetMultipartContent();
		super.resetRequest();
		this._markupContentDecodeStage=MarkupContentDecodeStage.custom;
		this._markupIORequestStage=MarkupIORequestStage.command;
		(this._markupHeaderContentBuilder==null?this._markupHeaderContentBuilder=new StringBuilder():this._markupHeaderContentBuilder).setLength(0);
		this._requiredContentLength=0;
		this._requiredContentLength=0;
		while(!(this._markupResponseBytes==null?this._markupResponseBytes=new ArrayList<byte[]>():this._markupResponseBytes).isEmpty()){
			byte[]markupResponseBytes=this._markupResponseBytes.remove(0);
			markupResponseBytes=null;
		}
		this._markupResponseBytes.clear();
		this._markupResponseLength=0;
	}
	
	@Override
	public void cleanupRequest() {
		this._properties.clear();
		if(this.parentRequest()!=null){
			while(!this._markupResponseBytes.isEmpty()){
				((MarkupIORequest)this.parentRequest())._markupResponseBytes.add(this._markupResponseBytes.remove(0));
			}
		}
		super.cleanupRequest();
		this._markupHeaderContentBuilder=null;
		this._multiPartProperties=null;
	}

	private HashMap<String,String> _multiPartProperties=new HashMap<String, String>();
	private byte[] _multiPartBoundary=null;
	private int _multiPartBoundaryIndex=0;
	private StringBuilder _multiPartHeaderContentBuilder=new StringBuilder();
	
	private void resetMultipartContent() {
		if(this._multiPartProperties==null) this._multiPartProperties=new HashMap<String, String>();
		this._multiPartProperties.clear();
		(this._multiPartHeaderContentBuilder==null?new StringBuilder():this._multiPartHeaderContentBuilder).setLength(0);
		this._multiPartBoundary=null;
		this._multiPartBoundaryIndex=0;
		this._multiPartContentStage=MultiPartContentStage.none;
		this._multiPartPropName="";
		this._multiPartPropValue="";
		this._multiPartContentBufferIndex=0;
		if(this._multiPartContentStream!=null){
			try {
				this._multiPartContentStream.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
			try {
				this._multiPartContentStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			this._multiPartContentStream=null;
		}
	}
	
	private enum MultiPartContentStage{
		none,
		boundary,
		header,
		content,
		end
	}
	
	private MultiPartContentStage _multiPartContentStage=MultiPartContentStage.none;
	private String _multiPartPropName="";
	private String _multiPartPropValue="";
	private byte[]  _multiPartContentBuffer=new byte[8192];
	private int _multiPartContentBufferIndex=0;
	private OutputStream _multiPartContentStream=null;
	
	private void decodeMultipartContent(byte b,char c) throws IOException{
		switch(this._multiPartContentStage){
		case boundary:
			switch(c){
			case 10:
					this._multiPartHeaderContentBuilder.setLength(0);
					this._multiPartContentStage=MultiPartContentStage.header;
				break;
			case 13:return;
			case '-':
				this._multiPartHeaderContentBuilder.append(c);
				if(this._multiPartHeaderContentBuilder.length()>=2){
					this._multiPartContentStage=MultiPartContentStage.end;
					this._multiPartHeaderContentBuilder.setLength(0);
				}
				break;
			}
			break;
		case content:
				if(this._multiPartBoundary[this._multiPartBoundaryIndex]==b){
					this._multiPartBoundaryIndex++;
					if(this._multiPartBoundaryIndex==this._multiPartBoundary.length){
						this._multiPartBoundaryIndex=0;
						if(this._multiPartContentBufferIndex>0){
							this._multiPartContentStream.write(_multiPartContentBuffer,0,this._multiPartContentBufferIndex);
							this._multiPartContentBufferIndex=0;
							this._multiPartContentStream.flush();
						}
						
						if(this._multiPartProperties.containsKey("FILENAME")){
							this.setParameter(this._multiPartProperties.get("NAME"), this._multiPartProperties.get("FILENAME"),true);
						}
						else{
							this.setParameter(this._multiPartProperties.get("NAME"),((ByteArrayOutputStream)this._multiPartContentStream).toString(),false);
						}
						for(String paramProperty:this._multiPartProperties.keySet()){
							this.setParameterProperty(this._multiPartProperties.get("NAME"), paramProperty, this._multiPartProperties.get(paramProperty));
						}
						this._multiPartProperties.clear();
						this._multiPartContentStream.close();
						this._multiPartContentStream=null;
						this._multiPartContentStage=MultiPartContentStage.boundary;
						this._multiPartHeaderContentBuilder.setLength(0);
					}
					return;
				}
				if(this._multiPartBoundaryIndex>0){
					int partBoundaryIndex=0;
					while(partBoundaryIndex<this._multiPartBoundaryIndex){
						this._multiPartContentBuffer[this._multiPartContentBufferIndex++]=this._multiPartBoundary[partBoundaryIndex++];
						if(this._multiPartContentBufferIndex==this._multiPartContentBuffer.length){
							this._multiPartContentStream.write(_multiPartContentBuffer,0,this._multiPartContentBufferIndex);
							this._multiPartContentBufferIndex=0;
							this._multiPartContentStream.flush();
						}
					}
					this._multiPartBoundaryIndex=0;
				}
				this._multiPartContentBuffer[this._multiPartContentBufferIndex++]=b;
				if(this._multiPartContentBufferIndex==this._multiPartContentBuffer.length){
					this._multiPartContentStream.write(_multiPartContentBuffer,0,this._multiPartContentBufferIndex);
					this._multiPartContentBufferIndex=0;
					this._multiPartContentStream.flush();
				}
			break;
		case header:
				switch(c){
				case 10:
						if(this._multiPartHeaderContentBuilder.length()==0){
							if(this._multiPartProperties.containsKey("FILENAME")){
								if(this._multiPartProperties.get("FILENAME").equals("")){
									this._multiPartContentStream=new ByteArrayOutputStream();
								}
								else{
									try {
										File tempMultiPartFile = File.createTempFile("ses", ".ses");
										this.setParameterFile(this._multiPartProperties.get("NAME"), tempMultiPartFile);
										_multiPartContentStream=new FileOutputStream(tempMultiPartFile);
									} catch (IOException e) {
									}
								}
							}
							else{
								this._multiPartContentStream=new ByteArrayOutputStream();
							}
							this._multiPartContentStage=MultiPartContentStage.content;
						}
						else if(this._multiPartHeaderContentBuilder.substring(0, this._multiPartHeaderContentBuilder.length()).toUpperCase().startsWith("CONTENT-DISPOSITION")){
							this._multiPartHeaderContentBuilder.delete(0, this._multiPartHeaderContentBuilder.indexOf(":")+1);
							
							this._multiPartHeaderContentBuilder.delete(0, this._multiPartHeaderContentBuilder.indexOf("formdata")+"form-data".length());
							this._multiPartHeaderContentBuilder.delete(0, this._multiPartHeaderContentBuilder.indexOf(";")+1);
							
							while(this._multiPartHeaderContentBuilder.charAt(0)==' ') this._multiPartHeaderContentBuilder.delete(0, 1);
							while(this._multiPartHeaderContentBuilder.indexOf("=")>=-1){
								while(this._multiPartHeaderContentBuilder.charAt(0)==' ') this._multiPartHeaderContentBuilder.delete(0, 1);
								this._multiPartPropName=this._multiPartHeaderContentBuilder.substring(0,this._multiPartHeaderContentBuilder.indexOf("=")).trim().toUpperCase();
								this._multiPartHeaderContentBuilder.delete(0, this._multiPartHeaderContentBuilder.indexOf("=")+1);
								while(this._multiPartHeaderContentBuilder.charAt(0)==' ') this._multiPartHeaderContentBuilder.delete(0, 1);
								if(this._multiPartHeaderContentBuilder.charAt(0)=='\"') this._multiPartHeaderContentBuilder.delete(0, 1);
								while(this._multiPartHeaderContentBuilder.charAt(0)!='\"'){
									this._multiPartPropValue+=this._multiPartHeaderContentBuilder.charAt(0);
									this._multiPartHeaderContentBuilder.delete(0, 1);
								}
								
								this._multiPartPropValue=this._multiPartPropName.equals("NAME")?this._multiPartPropValue.toUpperCase():this._multiPartPropValue;
								
								this._multiPartProperties.put(_multiPartPropName, _multiPartPropValue);	
								this._multiPartPropName="";
								this._multiPartPropValue="";
								this._multiPartHeaderContentBuilder.delete(0, 1);
								if(this._multiPartHeaderContentBuilder.length()==0) break;
								while(this._multiPartHeaderContentBuilder.charAt(0)==' ') this._multiPartHeaderContentBuilder.delete(0, 1);
								while(this._multiPartHeaderContentBuilder.charAt(0)==';') this._multiPartHeaderContentBuilder.delete(0, 1);
							}
							this._multiPartHeaderContentBuilder.setLength(0);
						}
						else{
							this._multiPartPropValue=this._multiPartHeaderContentBuilder.substring(0, this._multiPartHeaderContentBuilder.indexOf(":")).trim().toUpperCase();
							this._multiPartHeaderContentBuilder.delete(0, this._multiPartHeaderContentBuilder.indexOf(":")+1);
							this._multiPartPropValue=this._multiPartHeaderContentBuilder.substring(0, this._multiPartHeaderContentBuilder.length()).trim();
							this._multiPartProperties.put(_multiPartPropName, _multiPartPropValue);	
							this._multiPartPropName="";
							this._multiPartPropValue="";
							this._multiPartHeaderContentBuilder.setLength(0);
						}
					break;
				case 13:return;
				default:
					this._multiPartHeaderContentBuilder.append(c);
					break;
				}
			break;
		case none:
				switch(c){
				case 10:
						this._multiPartBoundary=("\r\n"+this._multiPartHeaderContentBuilder.substring(0,this._multiPartHeaderContentBuilder.length())).getBytes();
						this._multiPartHeaderContentBuilder.setLength(0);
						this._multiPartBoundaryIndex=0;
						this._multiPartContentStage=MultiPartContentStage.header;
					break;
				case 13: return;
				default:
					this._multiPartHeaderContentBuilder.append(c);
					break;
				}
			break;
		}
	}
	
	@Override
	public void wrapupRequest() throws Exception {
		this.setResponseHeader("CONTENT-LENGTH", String.valueOf(this._markupResponseLength));
		if(this.responseHeader("CONTENT-TYPE").equals("")){
			this.setResponseHeader("CONTENT-TYPE", this.responseContentType(this.urlExtenstion()));
		}
		
		if(this.responseHeader("CONNECTION").equals("")) this.setResponseHeader("CONNECTION", "Close");
		
		this._markupResponseBytes.add(0, "\r\n".getBytes());
		
		for(String responseHeader:this.responseHeaderNames()){
			this._markupResponseBytes.add(0, (responseHeader+": "+this.responseHeader(responseHeader)+"\r\n").getBytes());
		}
		
		this._markupResponseBytes.add(0, (this.protocol()+" 200 Ok\r\n").getBytes());
		
		super.wrapupRequest();
	}
	
	private String responseContentType(String urlExtenstion) {
		if((urlExtenstion.equals("html")||urlExtenstion.equals("htm"))){
			return "text/html";
		}
		else if(urlExtenstion.equals("xml")){
			return "text/xml";
		}
		else if(urlExtenstion.equals("css")){
			return "text/css";
		}
		else if(urlExtenstion.equals("js")){
			return "text/javascript";
		}
		else if(urlExtenstion.equals("png")){
			return "image/PNG";
		}
		else if(urlExtenstion.equals("jpg")){
			return "image/JPEG";
		}
		else if(urlExtenstion.equals("gif")){
			return "image/GIF";
		}
		return "text/plain";
	}

	@Override
	public void writeIOResponse() throws Exception {
		while(!this._markupResponseBytes.isEmpty()){
			this.writeBytes(this._markupResponseBytes.remove(0), this._markupResponseBytes.isEmpty());
		}
	}
	
	@Override
	public Request instanseOfSubRequest() throws Exception{
		String urlWidgetClasspath=this.topRequest().urlResourceRootPath()+this.topRequest().urlResourceName();
		if(!this.urlExtenstion().equals("")){
			urlWidgetClasspath=urlWidgetClasspath.substring(0,urlWidgetClasspath.length()-("."+this.urlExtenstion()).length());
		}
		Class<?> possibleWidgetClass=paas.reflection.ReflectUtils.findClass(urlWidgetClasspath,this.getClass());
		if(possibleWidgetClass==null){
			return null;
		}
		return (MarkupIOWidget)possibleWidgetClass.getConstructor(MarkupIORequest.class).newInstance(new Object[]{this});
	}
	
	public String formatUpperCaseLowerCase(String stringToFormat){
		if((stringToFormat=(stringToFormat==null?"":stringToFormat.trim())).equals("")) return stringToFormat;
		String formatUpperCaseLowerCase="";
		boolean started=false;
		for(char sc:stringToFormat.toCharArray()){
			if("ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(sc)>-1){
				
				formatUpperCaseLowerCase+=(started?(" "+sc):(""+sc).toUpperCase());
			}
			if(!started) started=true;
		}
		return formatUpperCaseLowerCase.trim();
	}
}

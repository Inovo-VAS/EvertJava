package baasserver.io.nio.handlers;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.ContentHandler;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;

import baasserver.io.handler.IOHandler;
import baasserver.io.nio.ServerReaderInputStream;
import baasserver.io.nio.ServerReaderWriter;
import baasserver.io.nio.ServerWriterOutputStream;

public class RequestHandler extends IOHandler {

	private HashMap<String,ArrayList<String>> _reqParams=new HashMap<String,ArrayList<String>>();
	private HashMap<String,HashMap<String,String>> _reqParamsProperties=new HashMap<String,HashMap<String,String>>();
	private HashMap<String,String> _reqRequestHeaders=new HashMap<String,String>();
	private HashMap<String,String> _reqResponseHeaders=new HashMap<String,String>();
	private HashMap<String,File> _reqParamFiles=new HashMap<String, File>();
	
	private int _reqResponseStatus=200;
	private String _reqResponseStatusMessage="Ok";
	
	private String _reqUrl="";
	private String _reqCommand="";
	private String _reqProtocol="";
	
	public void readInputStream(InputStream inputStream,int readBufferSize) throws Exception{
		baasserver.io.IOUtils.inputStreamToIOHandler(inputStream, this,readBufferSize);
		if(this._requestStageAt==RequestEnum.headerNameRequest){
			this._requestStageAt=RequestEnum.contentRequest;
			this.performRequest();
		}
	}
	
	private RequestContentHandler _requestContentHandler=null;
	
	@Override
	public void performRequest() {
		
	}

	private ArrayList<byte[]> _requestBytesOutputList=new ArrayList<byte[]>();
	
	private byte[] _currentBytesBeingProcessed=null;
	private int _currentBytesBeingProcessedIndex=0;
	
	@Override
	public void readFromInputStream(byte[] bytesReadFromStream,
			InputStream input) throws Exception{
		this.processBytesRead(bytesReadFromStream);
	}

	private enum RequestEnum{
		none,
	    command,
		url,
		protocol,
		headerNameRequest,
		headerValueRequest,
		contentRequest,
		headerNameResponse,
		headerValueResponse,
		contentResponse,
		statusResponse,
		statusMessageResponse
	}
	
	private RequestEnum _requestStageAt=RequestEnum.none;
	
	private String _reqHeaderName="";
	private String _reqHeaderValue="";
	private long _requestRequiredContentLength=0;
	private long _requestContentRemainingLength=0;
	private boolean _doneReading=false;
	private void processBytesRead(byte[] bytesReadFromStream) throws Exception{
		boolean breakLoop=false;
		int bytesReadFromStreamIndex=((_requestStageAt==RequestEnum.command)?bytesReadFromStream.length:0);
		for(byte br:bytesReadFromStream){
			bytesReadFromStreamIndex++;
			switch (_requestStageAt) {
			case none:
				 	switch(br){
				 	case 32:
				 		_requestStageAt=RequestEnum.url;
				 		break;
				 	default:
				 		this._reqCommand+=(char)br;
				 	}
					break;
			case url:
					switch(br){
				 	case 32:
				 		if(_reqUrl.indexOf("?")>-1){
				 			this.prepairForProcessingUrlEncodedParams();
							this.processUrlEncodedParams(this._reqUrl.substring(this._reqUrl.indexOf("?")+1).getBytes());
							this.wrapupAfterProcessingUrlEncodedParams();
							this._possibleParamName="";
				 			this._possibleParamValue="";
							this._reqUrl=this._reqUrl.substring(0,this._reqUrl.indexOf("?"));
						}
				 		_requestStageAt=RequestEnum.protocol;
				 		break;
				 	default:
				 		this._reqUrl+=(char)br;
				 	}
			    	break;
			case protocol:
					switch(br){
					case 13:
						continue;
					case 10:
						_requestStageAt=RequestEnum.headerNameRequest;
						break;
					default:
						this._reqProtocol+=(char)br;
				 		
				 	}
					break;
			case headerNameRequest:
					switch(br){
					case 13:
						continue;
					case 58:
						this._requestStageAt=RequestEnum.headerValueRequest;
						break;
					case 10:
						if(_reqHeaderName.equals("")){
							if(this._reqRequestHeaders.containsKey("CONTENT-LENGTH")){
								this._requestRequiredContentLength=Long.parseLong(this._reqRequestHeaders.get("CONTENT-LENGTH"));
								this._requestContentRemainingLength=(this._requestRequiredContentLength>0?2:0);
							}
							this._requestStageAt=RequestEnum.contentRequest;
						}
						break;
					default:
						this._reqHeaderName+=(char)br;
				 	}
			    	break;
			case headerValueRequest:
					switch(br){
					case 13:
						continue;
					case 10:
						this._reqRequestHeaders.put(_reqHeaderName.trim().toUpperCase(), _reqHeaderValue.trim());
						this._reqHeaderName="";
						this._reqHeaderValue="";
						this._requestStageAt=RequestEnum.headerNameRequest;
						break;
					default:
						this._reqHeaderValue+=(char)br;
				 	}
		    	break;
			case contentRequest:
					int bytesReadFromStreamLength=bytesReadFromStream.length;
					byte[] contentBytes=(bytesReadFromStreamIndex==bytesReadFromStream.length?bytesReadFromStream:new byte[bytesReadFromStream.length-bytesReadFromStreamIndex]);
					if(bytesReadFromStreamIndex<bytesReadFromStream.length){
						System.arraycopy(bytesReadFromStream, bytesReadFromStreamIndex, contentBytes, 0, contentBytes.length);
					}
					this.processContentBytesReceived(contentBytes);
					if(_requestRequiredContentLength>0){
						if(_doneReading=((_requestContentRemainingLength+=contentBytes.length)==this._requestRequiredContentLength)){
							_doneReading=true;
						}
					}
					breakLoop=true;
			    break;
			}
			if(breakLoop){
				break;
			}
		}
	}
	
	public boolean isDoneReading(){
		return this._doneReading;
	}
	
	public void processContentBytesReceived(byte[] contentBytes) throws Exception{
		if((this._requestContentHandler=(this._requestContentHandler==null?(RequestContentHandler)this.requestContentHandlerClass().getConstructor(RequestHandler.class).newInstance(new Object[]{this}):this._requestContentHandler)).processContentBytes(contentBytes)){
			_requestStageAt=RequestEnum.contentResponse;
			this.processRequest();
		}
	}
	
	public void processRequest() throws Exception{
	}

	public Class<?> requestContentHandlerClass(){
		if(this.reqRequestHeader("CONTENT-DISPOSITION").indexOf("mulitpart/form-data")>-1){
			return MultiPartContentHandler.class;
		}
		return RequestContentHandler.class;
	}
	
	public String reqRequestHeader(String headerName){
		String headerValue=this._reqRequestHeaders.get(headerName=headerName.toUpperCase());
		return (headerValue==null?"":headerValue);
	}
	
	public void setReqRequestHeader(String headerName,String headerValue){
		this._reqRequestHeaders.put(headerName.toUpperCase(), headerValue);
	}
	
	public String reqResponseHeader(String headerName){
		String headerValue=this._reqResponseHeaders.get(headerName=headerName.toUpperCase());
		return (headerValue==null?"":headerValue);
	}
	
	public void setReqResponseHeader(String headerName,String headerValue){
		this._reqResponseHeaders.put(headerName.toUpperCase(), headerValue);
	}

	@Override
	public void reset() {
		this._reqCommand="";
		this._reqUrl="";
		this._reqProtocol="";
		this._reqHeaderName="";
		this._reqHeaderValue="";
		this._requestContentHandler=null;
		this._currentBytesBeingProcessed=null;
		this._currentBytesBeingProcessedIndex=0;
		
		this._reqResponseStatus=0;
		this._reqResponseStatusMessage="";
		this._reqRequestHeaders.clear();
		this._reqResponseHeaders.clear();
		
		while(!this._reqParamsProperties.isEmpty()){
			this._reqParamsProperties.remove(this._reqParamsProperties.keySet().toArray()[0]).clear();
		}
		
		while(!this._reqParams.isEmpty()){
			this._reqParams.remove(this._reqParams.keySet().toArray()[0]).clear();
		}
		
		synchronized (_requestBytesOutputList) {
			_requestBytesOutputList.clear();
		}
		
		this._requestContentRemainingLength=0;
		this._requestRequiredContentLength=0;
		this._requestContentHandler=null;
	}

	private enum UrlParamEncodeStageEnum{
		name,
		value
	}
	
	private UrlParamEncodeStageEnum _urlParamEncodeStageEnumStage=UrlParamEncodeStageEnum.name;
	
	private String _possibleParamName="";
	private String _possibleParamValue="";
	
	public void prepairForProcessingUrlEncodedParams(){
		this._possibleParamName="";
		this._possibleParamValue="";
	}
	
	public void wrapupAfterProcessingUrlEncodedParams(){
		if(!_possibleParamName.equals("")){
			this.setReqParameter(_possibleParamName,_possibleParamValue,false);
			this.prepairForProcessingUrlEncodedParams();
		}
	}
	
	public void processUrlEncodedParams(byte[] bytesUrlEncoded) throws UnsupportedEncodingException {
		for(byte bc:bytesUrlEncoded){
			switch(_urlParamEncodeStageEnumStage){
			case name:
				switch(bc){
				case 61:
					_possibleParamName=URLDecoder.decode(_possibleParamName, "UTF-8");
					_urlParamEncodeStageEnumStage=UrlParamEncodeStageEnum.value;
					break;
				default:
					_possibleParamName+=(char)bc;	
				}
				break;
			case value:
				switch(bc){
				case 38:
					if(!_possibleParamValue.equals("")){
						_possibleParamValue=URLDecoder.decode(_possibleParamValue, "UTF-8");
					}
					this.setReqParameter(_possibleParamName,_possibleParamValue,false);
					_possibleParamName="";
					_possibleParamValue="";
					_urlParamEncodeStageEnumStage=UrlParamEncodeStageEnum.name;
					break;
				default:
					_possibleParamValue+=(char)bc;	
				}
				break;
			}			
		}
	}
	
	public void setReqParameter(String paramName, String paramValue, boolean override) {
		ArrayList<String> paramValues=this._reqParams.get(paramName=paramName.toUpperCase());
		if(paramValues==null){
			this._reqParams.put(paramName, paramValues=new ArrayList<String>());
		}
		else if(override){
			paramValues.clear();
		}
		if(!(paramValue=(paramValue==null?"":paramValue.trim())).equals("")){
			paramValues.add(paramValue);
		}
	}
	
	public ArrayList<String> reqParameter(String paramName){
		ArrayList<String> paramValues=this._reqParams.get(paramName=paramName.toUpperCase());
		return paramValues;
	}
	
	public String reqStringParameter(String paramName){
		ArrayList<String> paramValues=this._reqParams.get(paramName=paramName.toUpperCase());
		if(paramValues==null){
			return "";
		}
		if(paramValues.isEmpty()){
			return "";
		}
		return paramValues.get(0);
	}

	@Override
	public void write(byte[] bytesToWrite) throws Exception {
		synchronized (_requestBytesOutputList) {
			_requestBytesOutputList.add(bytesToWrite);
		}
	}
	
	public boolean requestBytesOutputAvailable(){
		return !this._requestBytesOutputList.isEmpty();
	}
	
	public void retrieveRequestBytesOutput(ArrayList<byte[]> destinationBytesOutput){
		if(destinationBytesOutput!=null){
			synchronized (destinationBytesOutput) {
				synchronized (_requestBytesOutputList) {
					if(!_requestBytesOutputList.isEmpty()){
						destinationBytesOutput.addAll(_requestBytesOutputList);
						_requestBytesOutputList.clear();
					}
				}
			}
		}
	}

	public void flushRequestBytesIntoOutputStream(
			OutputStream output) throws IOException {
		synchronized (_requestBytesOutputList) {
			while(!_requestBytesOutputList.isEmpty()) output.write(_requestBytesOutputList.remove(0));
		}
	}

	public void setReqParameterProperty(String parameterName,
			String paramPropertyName, String paramPropertyValue) {
		HashMap<String,String> paramProperties=_reqParamsProperties.get(parameterName=parameterName.toUpperCase());
		if(paramProperties==null){
			_reqParamsProperties.put(parameterName, paramProperties=new HashMap<String,String>());
		}
		paramProperties.put(paramPropertyName.toUpperCase(), paramPropertyValue);
	}
	
	public String reqParameterProperty(String parameterName,String paramPropertyName){
		HashMap<String,String> paramProperties=_reqParamsProperties.get(parameterName=parameterName.toUpperCase());
		if(paramProperties==null){
			return "";
		}
		String paramPropertyValue=paramProperties.get(paramPropertyName);
		return (paramPropertyValue==null?"":paramPropertyValue);
	}
}

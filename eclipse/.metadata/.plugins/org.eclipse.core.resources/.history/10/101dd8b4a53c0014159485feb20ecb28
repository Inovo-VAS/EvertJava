package inovo.flat.file.leads.importer;

import inovo.db.Database;
import inovo.servlet.InovoServletContextListener;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.TreeMap;

import javax.xml.crypto.Data;

public class FlatFileLeadsImportQueueManager {

	private static final HashMap<String,FlatFileLeadsImportRequest> _queuedFlatFileImportRequests=new HashMap<String,FlatFileLeadsImportRequest>();
	private static final FlatFileLeadsImportQueueManager _flatFileLeadsImportQueueManager=new FlatFileLeadsImportQueueManager();

	private HashMap<Integer,ArrayList<String>> _callsToImport=new HashMap<Integer,ArrayList<String>>();
	
	protected boolean _shutdownQueue=false;
	
	private FlatFileLeadsImportQueueManager(){
	}
	
	public void initiateFlatFileLeadsImportQueue(){
		new Thread(){
			public void run() {
				while(!_shutdownQueue){
					try {
						TreeMap<Integer,ArrayList<String>> registeredFlatFileImportRequests= Database.executeDBRequest("FLATFILELEADSIMPORTER", "SELECT [ID],[ALLIAS],[SOURCEIDFIELD],[SERVICEIDFIELD],[DEFAULTSERVICEID],[LOADIDFIELD],[DEFAULTLOADID],[PRIORITYFIELD],[DEFAULTPRIORITY],[CALLERNAMEFIELDS],[COMMENTSFIELDS],[USEFILENAMEASLOADNAME],[FORCECREATINGLOAD],[PHONE1FIELD],[PHONE2FIELD],[PHONE3FIELD],[PHONE4FIELD],[PHONE5FIELD],[PHONE6FIELD],[PHONE7FIELD],[PHONE8FIELD],[PHONE9FIELD],[PHONE10FIELD],[METAFIELD1],[METAFIELD2],[METAFIELD3],[METAFIELD4],[METAFIELD5],[METAFIELD6],[METAFIELD7],[METAFIELD8],[METAFIELD9],[METAFIELD10],[METAFIELD11],[METAFIELD12],[METAFIELD13],[METAFIELD14],[METAFIELD15],[METAFIELD16],[METAFIELD17],[METAFIELD18],[METAFIELD19],[METAFIELD20],[SOURCEPATH],[CURRENTFILEFIELDS],[ENABLENEWLOAD],[ENABLEALLIAS],[LOADNAMEMASK],[FILELOOKUPMASK]  FROM <DBUSER>.[LEADSDATAFILEALLIAS]", null);
						if(registeredFlatFileImportRequests!=null){
							for(int rowindex:registeredFlatFileImportRequests.keySet()){
								_flatFileLeadsImportQueueManager.addFlatFileImportTaskToQueue(Database.rowData(registeredFlatFileImportRequests, rowindex));
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
					try {
						this.sleep(10*1024);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			};
		}.start();
		
		new Thread(){
			public void run() {
				while(!_shutdownQueue){
					importCallRows();
					try {
						this.sleep(1024);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				importCallRows();
			};
		}.start();
	}
	
	private void importCallRows(){
		synchronized (_callsToImport){
			if(!_callsToImport.isEmpty()){
				
				int maxRows=_callsToImport.size();
				HashMap<String,String> callParams=new HashMap<String,String>();
				while(maxRows>1){
					callParams.clear();
					
					ArrayList<String> callRowData=_callsToImport.remove(maxRows-1);
					maxRows--;
					
					int colIndex=0;
					for(String colName:_callsToImport.get(0)){
						String colValue=callRowData.get(colIndex);
						callParams.put(colName, callRowData.get(colIndex));
						colIndex++;
					}
					
					callParams.put("CALLEXISTCOUNT", "0");
					
					if(callParams.get("SOURCEID").equals("0")){
						callParams.put("SOURCEID","0");
						try{
							Database.executeDBRequest("FLATFILELEADSIMPORTER", "SELECT (ISNULL(MAX(ID),0)+1) AS SOURCEID FROM <DBUSER>.DYNAMICCALLERLIST WHERE SERVICEID=:SERVICEID AND LOADID=:LOADID", callParams);
						}
						catch(Exception e){
							e.printStackTrace();
						}
					}
					
					callParams.put("PRESENCESOURCEID","0");
					try{
						Database.executeDBRequest("PRESENCE", "SELECT ISNULL(MAX(SOURCEID),0) AS PRESENCESOURCEID FROM <DBUSER>.PCO_OUTBOUNDQUEUE WHERE SERVICEID=:SERVICEID AND LOADID=:LOADID", callParams);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					
					if(Long.parseLong(callParams.get("PRESENCESOURCEID"))>=Long.parseLong(callParams.get("SOURCEID"))){
						callParams.put("SOURCEID",String.valueOf((Long.parseLong(callParams.get("PRESENCESOURCEID"))+1)));
					}
					
					
					if(!callParams.get("METAFIELD1").equals("")){						
						try{
							Database.executeDBRequest("FLATFILELEADSIMPORTER","SELECT COUNT(*) AS CALLEXISTCOUNT FROM <DBUSER>.DYNAMICCALLERLIST WHERE UPPER(METAFIELD1)=UPPER(:METAFIELD1)",callParams);
						}
						catch(Exception e){
							e.printStackTrace();
						}
					}
					if(callParams.get("CALLEXISTCOUNT").equals("0")){
						try{
							Database.executeDBRequest("FLATFILELEADSIMPORTER", "INSERT INTO <DBUSER>.[DYNAMICCALLERLIST]([ID],[SERVICEID],[LOADID],[CALLERNAME],[PHONE1],[PHONE1EXT],[PHONE2],[PHONE2EXT],[PHONE3],[PHONE3EXT],[PHONE4],[PHONE4EXT],[PHONE5],[PHONE5EXT],[PHONE6],[PHONE6EXT],[PHONE7],[PHONE7EXT],[PHONE8],[PHONE8EXT],[PHONE9],[PHONE9EXT],[PHONE10],[PHONE10EXT],[SCHEDULEDCALL],[COMMENTS],[LOADREQUESTTYPE],[RECORDHANDLEFLAG],[PRIORITY],[AGENTLOGINID],[LASTACTIONDATETIME],[METAFIELD1],[METAFIELD2],[METAFIELD3],[METAFIELD4],[METAFIELD5],[METAFIELD6],[METAFIELD7],[METAFIELD8],[METAFIELD9],[METAFIELD10],[METAFIELD11],[METAFIELD12],[METAFIELD13],[METAFIELD14],[METAFIELD15],[METAFIELD16],[METAFIELD17],[METAFIELD18],[METAFIELD19],[METAFIELD20],[FIELDSTOMODIFY]) VALUES (:SOURCEID,:SERVICEID,:LOADID,:CALLERNAME,:PHONE1,:PHONE1EXT,:PHONE2,:PHONE2EXT,:PHONE3,:PHONE3EXT,:PHONE4,:PHONE4EXT,:PHONE5,:PHONE5EXT,:PHONE6,:PHONE6EXT,:PHONE7,:PHONE7EXT,:PHONE8,:PHONE8EXT,:PHONE9,:PHONE9EXT,:PHONE10,:PHONE10EXT,"+(callParams.get("SCHEDULEDCALL").equals("")?"NULL":":SCHEDULEDCALL")+",:COMMENTS,:LOADREQUESTTYPE,:RECORDHANDLEFLAG,:PRIORITY,:AGENTLOGINID,GETDATE(),:METAFIELD1,:METAFIELD2,:METAFIELD3,:METAFIELD4,:METAFIELD5,:METAFIELD6,:METAFIELD7,:METAFIELD8,:METAFIELD9,:METAFIELD10,:METAFIELD11,:METAFIELD12,:METAFIELD13,:METAFIELD14,:METAFIELD15,:METAFIELD16,:METAFIELD17,:METAFIELD18,:METAFIELD19,:METAFIELD20,:FIELDSTOMODIFY)", callParams);
						}
						catch(Exception e){
							e.printStackTrace();
						}
					}
					else{
						InovoServletContextListener.inovoServletListener().logDebug("WARNING Duplicate record found but not inserted [METAFIELD1="+callParams.get("METAFIELD1")+"][METAFIELD19="+callParams.get("METAFIELD19")+"][METAFIELD20="+callParams.get("METAFIELD20")+"]");
					}
					
					callRowData.clear();
				}				
			}
		}
	}

	public void shutdownImportQueue(){
		this._shutdownQueue=true;
		while(!_queuedFlatFileImportRequests.isEmpty()){
			try {
				Thread.sleep(1024);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public static FlatFileLeadsImportQueueManager flatFileLeadsImportQueueManager(){
		return _flatFileLeadsImportQueueManager;
	}

	public void removeFlatFileImportTaskFromQueue(
			FlatFileLeadsImportRequest flatFileLeadsImportRequest,String flatFileAllias) {
		synchronized (_queuedFlatFileImportRequests) {
			_queuedFlatFileImportRequests.remove(flatFileAllias);
			_queuedFlatFileImportRequests.keySet().remove(flatFileAllias);
		}
	}
	
	public void addFlatFileImportTaskToQueue(HashMap<String,String> flatfileimportproperties){
		FlatFileLeadsImportRequest handledRequest=null;
		synchronized (_queuedFlatFileImportRequests) {
			String flatfileallias=flatfileimportproperties.get("ALLIAS").toUpperCase();
			if(_queuedFlatFileImportRequests.containsKey(flatfileallias)){
				if(flatfileimportproperties.containsKey("ENABLEALLIAS")){
					if(flatfileimportproperties.get("ENABLEALLIAS").equals("TRUE")){
						_queuedFlatFileImportRequests.get(flatfileallias).setFlatFileLeadsImportProperties(flatfileimportproperties);
					}
					else{
						_queuedFlatFileImportRequests.get(flatfileallias).disable();
					}
				}
			}
			else{
				if(flatfileimportproperties.containsKey("ENABLEALLIAS")){
					if(flatfileimportproperties.get("ENABLEALLIAS").equals("TRUE")){
						handledRequest=new FlatFileLeadsImportRequest(this, flatfileimportproperties);
						_queuedFlatFileImportRequests.put(flatfileallias, handledRequest);
					}
				}
			}
		}
		if(handledRequest!=null){
			handledRequest.initiateLeadsImportRequest();
			handledRequest=null;
		}
	}

	public String[] registeredFileAlliases(String flatFileAllias) {
		Object [] listedFileAlliases=_queuedFlatFileImportRequests.keySet().toArray();
		
		if(listedFileAlliases!=null){
			ArrayList<String> possibleFilterAlliasses=new ArrayList<String>();
			for(Object possibleFilterAllias:listedFileAlliases){
				if(((String)possibleFilterAllias).toUpperCase().startsWith(flatFileAllias)){
					possibleFilterAlliasses.add(((String)possibleFilterAllias).toUpperCase());
				}
			}
			
			if(possibleFilterAlliasses.isEmpty()){
				return new String[0];
			}
			else{
				listedFileAlliases=null;
				listedFileAlliases=new String[possibleFilterAlliasses.size()];
				possibleFilterAlliasses.toArray(listedFileAlliases);
				return (String[])listedFileAlliases;
			}
		}
		return new String[0];
	}

	
	private static HashMap<Long,HashMap<Long,Long>> _callkeys=new HashMap<Long,HashMap<Long,Long>>();
	private static String _dailymappingcalllabel="";
	public long adjustSourceID(long serviceid, long loadid,
			long sourceid) {
		long actualsourceid=0;
		HashMap<Long,Long> callsourceload=null;
		String currentdailylabel=new SimpleDateFormat("yyyyMMdd").format(new Date());
		
		synchronized (_callkeys) {
			if(!_dailymappingcalllabel.equals(currentdailylabel)){
				_dailymappingcalllabel=currentdailylabel;
				while(!_callkeys.isEmpty()){
					Object callkey=_callkeys.keySet().toArray()[0];
					_callkeys.remove(callkey).clear();
					_callkeys.keySet().remove(callkey);
				}
				_callkeys.clear();
			}
			callsourceload=_callkeys.get(serviceid);
			if(callsourceload==null){
				callsourceload=new HashMap<Long,Long>();
				callsourceload.put(loadid, sourceid);
				actualsourceid=sourceid;
				_callkeys.put(serviceid, callsourceload);
			}
			else if(!callsourceload.containsKey(loadid)){
				callsourceload.put(loadid, sourceid);
				actualsourceid=sourceid;
			}
			else{
				actualsourceid=callsourceload.get(loadid)+1;
				if(actualsourceid<sourceid){
					callsourceload.put(loadid, sourceid);
					actualsourceid=sourceid;
				}
			}
		}
		return actualsourceid;
	}
	
	public void appendCallImportDataset(TreeMap<Integer,ArrayList<String>> callImportDataset){
		synchronized (_callsToImport) {
			for(int rowindex:callImportDataset.keySet()){
				if(rowindex==0) continue;
				if(_callsToImport.isEmpty()){
					_callsToImport.put(0, callImportDataset.get(0));
				}
				_callsToImport.put(_callsToImport.size(),callImportDataset.get(rowindex));
			}
		}
	}
}

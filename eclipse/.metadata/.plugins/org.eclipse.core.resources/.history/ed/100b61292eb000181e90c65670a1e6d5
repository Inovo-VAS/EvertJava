package inovo;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import inovo.db.Database;
import inovo.http.HttpClient;
import inovo.servlet.InovoCoreEnvironmentManager;
import inovo.servlet.InovoServletContextListener;
import inovo.web.InovoHTMLPageWidget;
import inovo.web.InovoWebWidget;

public class Locking extends InovoHTMLPageWidget {

	public Locking(InovoWebWidget parentWidget, InputStream inStream) {
		super(parentWidget, inStream);
	}

	@Override
	public void pageContent() throws Exception {
		this.startComplexElement("div","id=lockunlocksection");
			this.lockunlocksection();
		this.endComplexElement("div");
	}
	
	public void lockunlocksection() throws Exception{
		if(this.requestParameter("LOGGEDINUSER").equals("")){
			this.startTable();
				this.startRow();
					this.startCell();this.fieldLabel("USERNAME");this.endCell();this.startCell();this.fieldInput("USERNAME", "", "text", true);this.endCell();
				this.endRow();
				this.startRow();
					this.startCell();this.fieldLabel("PASSWORD");this.endCell();this.startCell();this.fieldInput("PASSWORD", "", "password", true);this.endCell();
				this.endRow();
			this.endTable();
			this.action("LOG IN", "login", "", "", "", "", "", "");
		} else {
			this.fieldHidden("LOGGEDINUSER", this.requestParameter("USERNAME"));
			this.startTable();
				this.startRow();
					this.startCell();
						this.action("CLIENTS", "lockclients", "", "", "details", "", "", "");
						this.action("ACCOUNTS", "lockaccounts", "", "", "details", "", "", "");
					this.endCell();
				this.endRow();
				this.startRow();
					this.startCell("id=details");
					this.endCell();
				this.endRow();
			this.endTable();
		}
	}
	
	public void login() throws Exception{
		if(this.authenticateUser()){
			this.replaceComponentContent("lockunlocksection");
				this.setRequestParameter("LOGGEDINUSER", this.requestParameter("USERNAME"), true);
				this.lockunlocksection();
			this.endReplaceComponentContent();			
		} else{
			this.showDialog("", "contentid=dlgLoginFailed|title=LOGIN FAILED");
			this.replaceComponentContent("dlgLoginFailed");
				this.respond.print("EITHER USERNAME OR PASSWORD IS INVALID");
			this.endReplaceComponentContent();
		}
	}

	private boolean authenticateUser() {
		try {
			HttpClient httpClient=new HttpClient(InovoServletContextListener.inovoServletListener().configProperty("CIMURL")+"/integration/VerifyUsernamePassword");
			StringBuilder responseStringBuilder=new StringBuilder();
			HashMap<String, List<String>> responseHeaders=new HashMap<String, List<String>>();
			httpClient.send(
					HttpClient.settings("", ":", "|"),
					HttpClient.parameters("emailUsername="+this.requestParameter("USERNAME")+"|password="+this.requestParameter("PASSWORD"), ";", "|"),responseHeaders, responseStringBuilder);
			if(responseStringBuilder.toString().contains("\"AuthSuccess\":true")){
				return true;
			} else{
				return false;
			}
		} catch (Exception e) {
			return false;
		}
	}

	public void lockclients() throws Exception{
		this.startComplexElement("div", "class=ui-widget-content|id=lockedclients");
			this.startComplexElement("div","class=ui-widget-heading");this.respondString("CLIENT(s)");this.endComplexElement("div");
			this.startTable();
				this.startRow();
					this.startCell();
						this.fieldLabel("FILE");
					this.endCell();
					this.startCell();
						this.fieldInput("lockunlock", "", "select", true, "", "1=LOCK|2=UNLOCK");
					this.endCell();
					this.startCell();
						this.fieldInput("clientstolock", "", "file", true);
					this.endCell();
					this.startCell();
						this.action("LOAD CLIENTS TO LOCK", "lockclientsfromfile", "", "", "", "", "", "");
					this.endCell();
				this.endRow();
				this.startRow("id=lockunlockclient");
					this.lockunlockclient();
				this.endRow();
			this.endTable();
			this.startComplexElement("div","id=lockedclientsset");
				this.lockedclients();
			this.endComplexElement("div");
		this.endComplexElement("div");
	}
	
	public void lockunlockclient() throws Exception{
		this.startCell();
			this.fieldLabel("CLIENTNR");
		this.endCell();
		this.startCell();
			this.fieldInput("lockunlockclientnr", "", "text", true);
		this.endCell();
		this.startCell();
			this.fieldInput("lockunlockstate", "", "select", true, "", "1=LOCK|2=UNLOCK");
		this.endCell();
		this.startCell();
			this.action("SEARCH CLIENT", "searchlockunlockclient", "", "", "", "", "", "");
			this.action("LOCK/UNLOCK CLIENT", "applylockunlockclient", "", "", "", "", "", "");
		this.endCell();
	}
	
	public void searchlockunlockclient() throws Exception{
			this.replaceComponentContent("lockedclientsset");
				this.lockedclients();
			this.endReplaceComponentContent();			
	}
	
	public void applylockunlockclient() throws Exception{
		ArrayList<String> errors=new ArrayList<String>();
		if (this.requestParameter("lockunlockclientnr").equals("")){
			errors.add("NO CLIENT NUMBER ENTERED");
		}
		if (this.requestParameter("lockunlockstate").equals("")){
			errors.add("NO LOCK/UNLOCK STATE INDICATED");
		}
		
		if (errors.isEmpty()){
			HashMap<String,Object> updateclientparams=new HashMap<String, Object>();
			updateclientparams.put("LOCKUNLOCKCLIENTREF", this.requestParameter("lockunlockclientnr"));
			updateclientparams.put("LOCKUNLOCKSTATE", this.requestParameter("lockunlockstate"));
			updateclientparams.put("LOGGEDINUSER", this.requestParameter("LOGGEDINUSER"));
			Database.executeDBRequest(null, "LOCKING", "EXECUTE dbo.LOCKCLIENT :LOCKUNLOCKCLIENTREF,:LOCKUNLOCKSTATE,:LOGGEDINUSER", updateclientparams, null);
			this.searchlockunlockclient();			
		} else {
			this.showDialog("", "title=LOCK/UNLOCK CLIENT|contentid=dlgapplylockunlockclient");
			this.replaceComponentContent("dlgapplylockunlockclient");
				this.startComplexElement("ul");
					for(String err:errors){
						this.startComplexElement("li");this.respondString(err);this.endComplexElement("li");
					}
				this.endComplexElement("ul");
			this.endReplaceComponentContent();
			errors.clear();
		}
	}
	
	public void lockclientsfromfile() throws Exception{
		File clientsFile=this.requestParameterFile("clientstolock");
		ArrayList<String> errors=new ArrayList<String>();
		if (clientsFile==null){
			errors.add("NO FILE SELECTED");
		}
		if (this.requestParameter("lockunlock").equals("")){
			errors.add("NO INDICATION TO LOCK OR UNLOCK");
		}
		
		if (errors.isEmpty()){
			FileInputStream fin=new FileInputStream(clientsFile);
			ArrayList<String> cols=new ArrayList<String>();
			try{
				Database.populateDatasetFromFlatFileStream("CSV", fin, ',', this, "lockClientsFromFileData");
				try{fin.close();}catch(Exception fe){}
			} catch(Exception e){
				try{fin.close();}catch(Exception fe){}
				errors.add("FILE PROCESSING:"+e.getMessage());
			}
			fin=null;
		}
		if (errors.isEmpty()){
			
			
			this.replaceComponentContent("details");
				this.lockclients();
			this.endReplaceComponentContent();
		} else {
			this.showDialog("", "title=FILE LOAD ERRORS|contentid=clientstoloaderr");
			this.replaceComponentContent("clientstoloaderr");
				this.startComplexElement("ul","class=ui-alert");
					while(!errors.isEmpty()){
						this.startComplexElement("li");this.respondString(errors.remove(0));this.endComplexElement("li");
					}
				this.endComplexElement("ul");
			this.endReplaceComponentContent();
		}
		clientsFile=null;
	}
	
	private HashMap<String, Object> lockClientParams=new HashMap<String, Object>();
	public void lockClientsFromFileData(long rowindex,ArrayList<Object> data,ArrayList<Object> cols) throws Exception{
		if (rowindex>0){
			lockClientParams.clear();
			lockClientParams.put("CLIENTREF", data.get(0));
			lockClientParams.put("LOCKED",this.requestParameter("lockunlock"));
			lockClientParams.put("LOGGEDINUSER",this.requestParameter("LOGGEDINUSER"));
			Database.executeDBRequest(null, "LOCKING", "EXECUTE dbo.LOCKCLIENT :CLIENTREF,:LOCKED,:LOGGEDINUSER", lockClientParams, null);
		}
	}
	
	
	private boolean haslockedclientsdata=false;
	
	public void lockedclients() throws Exception{
		HashMap<String,Object> clientsSearchParams=new HashMap<String, Object>();
		String searchCriteria="";
		
		if (!this.requestParameter("lockunlockclientnr").equals("")){
			searchCriteria+="UPPER(:LOCKUNLOCKCLIENTNR) IN (OC.IDNumber,OC.ExtSourceID) ";
			clientsSearchParams.put("LOCKUNLOCKCLIENTNR", this.requestParameter("lockunlockclientnr"));
		}
		
		if (!this.requestParameter("lockunlockstate").equals("")){
			if (this.requestParameter("lockunlockstate").equals("1")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.Locked='Y'";
			} else if (this.requestParameter("lockunlockstate").equals("2")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.Locked='N'";
			}
		}
		if(!this.requestParameter("ACCBOTTOMID").equals("")){
			if(this.requestParameter("ACCNAVACTION").equals("NEXT")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.ID>="+this.requestParameter("ACCTOPID");
			} else if(this.requestParameter("ACCNAVACTION").equals("PREV")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.ID>=("+this.requestParameter("ACCBOTTOMID")+"-100)";
			}
		}
		
		Database.executeDBRequest(null, "LOCKING", "SELECT TOP 100 OCL.ID, OC.OmniClientID,OC.Title,OC.Surname,OC.IDNumber,OC.ExtSourceID,CASE WHEN OCL.Locked='Y' THEN 'LOCKED' ELSE 'UNLOCKED' END AS Locked,OCL.CIMUser,OCL.lastUpdated FROM dbo.OmniClient OC inner join OmniClientLock OCL on OCL.ClientRefID=OC.OmniClientID"+(searchCriteria.equals("")?"":" AND "+searchCriteria),clientsSearchParams, this, "lockedclientsdata");
		if (haslockedclientsdata){
			this.endTable();
		}
	}
	
	private int _colIndex=0;
	public void lockedclientsdata(boolean doneRecs,long rowindex,ArrayList<Object> data,ArrayList<Object> cols) throws Exception{
		if (rowindex==0){
			this.startTable();
			haslockedclientsdata=true;
		}
		this._colIndex=0;
		if(rowindex==1){
			this.fieldHidden("ACCBOTTOMID", data.get(0).toString());
		}
		this.startRow("id=rw"+String.valueOf(rowindex));
			for(Object dat:((rowindex==0)?cols:data)){
				if (rowindex==0){
					this.startColumn();
				} else {
					this.startCell();
				}
				if (_colIndex==0){
					if(rowindex>0){
						this.action(data.get(6).equals("LOCKED")?"unlock":"lock", "editclient", "", "", "", "", "", "lockclientid="+data.get(0).toString()+"&rwnr=rw"+String.valueOf(rowindex));
					} else {
						//this.respond.print("");
						this.action("<<", "searchlockunlockaccount", "", "", "", "", "", "ACCNAVACTION=PREV");this.action(">>", "searchlockunlockaccount", "", "", "", "", "", "ACCNAVACTION=NEXT");
					}
				} else{
					this.respond.print(dat);
				}
				if (rowindex==0){
					this.endColumn();
				} else {
					this.endCell();
				}
				_colIndex++;
			}
		this.endRow();
		if(doneRecs){
			this.fieldHidden("ACCTOPID", data.get(0).toString());
		}
	}
	
	public void editclient() throws Exception{
		Database.executeDBRequest(null, "LOCKING", "UPDATE dbo.OmniClientLock SET Locked=CASE WHEN Locked='Y' THEN 'N' ELSE 'Y' END WHERE ID="+ this.requestParameter("lockclientid"),null, null);
		this.replaceComponentContent(this.requestParameter("rwnr"));
			Database.executeDBRequest(null, "LOCKING", "SELECT OCL.ID, OC.OmniClientID,OC.Title,OC.Surname,OC.IDNumber,OC.ExtSourceID,CASE WHEN OCL.Locked='Y' THEN 'LOCKED' ELSE 'UNLOCKED' END AS Locked FROM dbo.OmniClient OC inner join OmniClientLock OCL on OCL.ClientRefID=OC.OmniClientID AND OCL.ID="+ this.requestParameter("lockclientid"),null, this, "editclientdata");
		this.endReplaceComponentContent();
	}
	
	public void editclientdata(long rowindex,ArrayList<Object> data,ArrayList<Object> cols) throws Exception{
		if (rowindex>0){
			this._colIndex=0;
			for(Object dat:((rowindex==0)?cols:data)){
				if (rowindex==0){
					this.startColumn();
				} else {
					this.startCell();
				}
				if (_colIndex==0){
					if(rowindex>0){
						this.action(data.get(6).equals("LOCKED")?"unlock":"lock", "editclient", "", "", "", "", "", "lockclientid="+data.get(0).toString()+"&rwnr="+this.requestParameter("rwnr"));
					} else {
						this.respond.print("");
					}
				} else{
					this.respond.print(dat);
				}
				if (rowindex==0){
					this.endColumn();
				} else {
					this.endCell();
				}
				_colIndex++;
			}
		}
	}
	
	public void editaccount() throws Exception{
		Database.executeDBRequest(null, "LOCKING", "UPDATE dbo.OmniAccountLock SET Locked=CASE WHEN Locked='Y' THEN 'N' ELSE 'Y' END WHERE ID="+ this.requestParameter("lockaccountid"),null, null);
		
		this.replaceComponentContent(this.requestParameter("rwnr"));
			Database.executeDBRequest(null, "LOCKING", "SELECT OCL.ID, OC.OmniClientID,OC.Title,OC.Surname,OC.IDNumber,OC.ExtSourceID,OCL.Account,CASE WHEN OCL.Locked='Y' THEN 'LOCKED' ELSE 'UNLOCKED' END AS Locked FROM dbo.OmniClient OC inner join dbo.OmniAccountLock OCL on OCL.ClientRefID=OC.OmniClientID AND OCL.ID="+ this.requestParameter("lockaccountid"),null, this, "editaccountdata");
		this.endReplaceComponentContent();
	}
	
	public void editaccountdata(long rowindex,ArrayList<Object> data,ArrayList<Object> cols) throws Exception{
		if (rowindex>0){
			this._colIndex=0;
			for(Object dat:((rowindex==0)?cols:data)){
				if (rowindex==0){
					this.startColumn();
				} else {
					this.startCell();
				}
				if (_colIndex==0){
					if(rowindex>0){
						this.action(data.get(7).equals("LOCKED")?"unlock":"lock", "editaccount", "", "", "", "", "", "lockaccountid="+data.get(0).toString()+"&rwnr="+this.requestParameter("rwnr"));
					} else {
						this.respond.print("");
					}
				} else{
					this.respond.print(dat);
				}
				if (rowindex==0){
					this.endColumn();
				} else {
					this.endCell();
				}
				_colIndex++;
			}
		}
	}
	
	public void lockaccounts() throws Exception{
		this.startComplexElement("div", "class=ui-widget-content|id=lockedaccounts");
			this.startComplexElement("div","class=ui-widget-heading");this.respondString("ACCOUNT(s)");this.endComplexElement("div");
			this.startTable();
				this.startRow();
					this.startCell();
						this.fieldLabel("FILE");
					this.endCell();
					this.startCell();
						this.fieldInput("lockunlock", "", "select", true, "", "1=LOCK|2=UNLOCK");
					this.endCell();
					this.startCell();
						this.fieldInput("accountstolock", "", "file", true);
					this.endCell();
					this.startCell();
						this.action("LOAD ACCOUNTS TO LOCK", "lockaccountsfromfile", "", "", "", "", "", "");
					this.endCell();
				this.endRow();
				this.startRow("id=lockunlockaccount");
					this.lockunlockaccount();
				this.endRow();
			this.endTable();
			this.startComplexElement("div","id=lockedaccountsset");
				this.lockedaccounts();
			this.endComplexElement("div");
		this.endComplexElement("div");
	}
	
	public void lockunlockaccount() throws Exception{
		this.startCell();
			this.fieldLabel("ACCOUNTNR");
		this.endCell();
		this.startCell();
			this.fieldInput("lockunlockaccountnr", "", "text", true);
		this.endCell();
		this.startCell();
			this.fieldInput("lockunlockstate", "", "select", true, "", "1=LOCK|2=UNLOCK");
		this.endCell();
		this.startCell();
			this.action("SEARCH ACCOUNT", "searchlockunlockaccount", "", "", "", "", "", "");
			this.action("LOCK/UNLOCK ACCOUNT", "applylockunlockaccount", "", "", "", "", "", "");
		this.endCell();
	}
	
	public void searchlockunlockaccount() throws Exception{
		this.replaceComponentContent("lockedaccountsset");
			this.lockedaccounts();
		this.endReplaceComponentContent();
	}
	
	public void applylockunlockaccount() throws Exception{
		ArrayList<String> errors=new ArrayList<String>();
		if (this.requestParameter("lockunlockaccountnr").equals("")){
			errors.add("NO ACCOUNT NUMBER ENTERED");
		}
		if (this.requestParameter("lockunlockstate").equals("")){
			errors.add("NO LOCK/UNLOCK STATE INDICATED");
		}
		
		if (errors.isEmpty()){
			HashMap<String,Object> updateclientparams=new HashMap<String, Object>();
			updateclientparams.put("LOCKUNLOCKACCOUNTNR", this.requestParameter("lockunlockaccountnr"));
			updateclientparams.put("LOCKUNLOCKSTATE", this.requestParameter("lockunlockstate"));
			updateclientparams.put("LOGGEDINUSER", this.requestParameter("LOGGEDINUSER"));
			Database.executeDBRequest(null, "LOCKING", "EXECUTE dbo.LOCKACCOUNT :LOCKUNLOCKACCOUNTNR,:LOCKUNLOCKSTATE,:LOGGEDINUSER", updateclientparams, null);
			this.searchlockunlockaccount();			
		} else {
			this.showDialog("", "title=LOCK/UNLOCK ACCOUNT|contentid=dlgapplylockunlockaccount");
			this.replaceComponentContent("dlgapplylockunlockaccount");
				this.startComplexElement("ul");
					for(String err:errors){
						this.startComplexElement("li");this.respondString(err);this.endComplexElement("li");
					}
				this.endComplexElement("ul");
			this.endReplaceComponentContent();
			errors.clear();
		}
	}

	public  void lockaccountsfromfile() throws Exception{
		File accountsFile=this.requestParameterFile("accountstolock");
		ArrayList<String> errors=new ArrayList<String>();
		if (accountsFile==null){
			errors.add("NO FILE SELECTED");
		}
		if (this.requestParameter("lockunlock").equals("")){
			errors.add("NO INDICATION TO LOCK OR UNLOCK");
		}
		
		if (errors.isEmpty()){
			LockingFilesImporter.lockingFilesImporter().importLockUnlockFile(accountsFile,this.requestParameter("lockunlock"),this.requestParameterProperty("accountstolock", "FILENAME"),this.requestParameter("LOGGEDINUSER"),this.requestHeader("REMOTE-HOST"));
			accountsFile=null;
		}
		if (errors.isEmpty()){
			this.replaceComponentContent("details");
				this.lockaccounts();
			this.endReplaceComponentContent();
		} else {
			this.showDialog("", "title=FILE LOAD ERRORS|contentid=accountstoloaderr");
			this.replaceComponentContent("accountstoloaderr");
				this.startComplexElement("ul","class=ui-alert");
					while(!errors.isEmpty()){
						this.startComplexElement("li");this.respondString(errors.remove(0));this.endComplexElement("li");
					}
				this.endComplexElement("ul");
			this.endReplaceComponentContent();
		}
		accountsFile=null;
	}
	
	private boolean haslockedaccountsdata=false;
	public void lockedaccounts() throws Exception{
		HashMap<String,Object> accountsSearchParams=new HashMap<String, Object>();
		String searchCriteria="";
		
		if (!this.requestParameter("lockunlockaccountnr").equals("")){
			searchCriteria+="UPPER(:LOCKUNLOCKACCOUNTNR) IN (OCL.Account) ";
			accountsSearchParams.put("LOCKUNLOCKACCOUNTNR", this.requestParameter("lockunlockaccountnr"));
		}
		
		if (!this.requestParameter("lockunlockstate").equals("")){
			if (this.requestParameter("lockunlockstate").equals("1")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.Locked='Y'";
			} else if (this.requestParameter("lockunlockstate").equals("2")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.Locked='N'";
			}
		}
		if(!this.requestParameter("ACCBOTTOMID").equals("")){
			if(this.requestParameter("ACCNAVACTION").equals("NEXT")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.ID>="+this.requestParameter("ACCTOPID");
			} else if(this.requestParameter("ACCNAVACTION").equals("PREV")){
				searchCriteria+=(searchCriteria.equals("")?"":" AND")+" OCL.ID>=("+this.requestParameter("ACCBOTTOMID")+"-100)";
			}
		}
		
		Database.executeDBRequest(null, "LOCKING", "SELECT TOP 100 OCL.ID, OC.OmniClientID,OC.Title,OC.Surname,OC.IDNumber,OC.ExtSourceID,OCL.Account,CASE WHEN OCL.Locked='Y' THEN 'LOCKED' ELSE 'UNLOCKED' END AS Locked,OCL.CIMUser,OCL.lastUpdated FROM dbo.OmniClient OC inner join dbo.OmniAccountLock OCL on OCL.ClientRefID=OC.OmniClientID"+(searchCriteria.equals("")?"":" AND "+searchCriteria),accountsSearchParams, this, "lockedaccountsdata");
		if (haslockedaccountsdata){
			this.endTable();
		}
	}
	
	private String accnextid="";
	public void lockedaccountsdata(boolean doneRecs,long rowindex,ArrayList<Object> data,ArrayList<Object> cols) throws Exception{
		if (rowindex==0){
			this.startTable();
			haslockedaccountsdata=true;
		}
		this._colIndex=0;
		if(rowindex==1){
			this.fieldHidden("ACCBOTTOMID", data.get(0).toString());
		}
		this.startRow("id=rw"+String.valueOf(rowindex));
			for(Object dat:((rowindex==0)?cols:data)){
				if (rowindex==0){
					this.startColumn();
				} else {
					this.startCell();
				}
				if (_colIndex==0){
					if(rowindex>0){
						this.action(data.get(7).equals("LOCKED")?"unlock":"lock", "editaccount", "", "", "", "", "", "lockaccountid="+data.get(0).toString()+"&rwnr=rw"+String.valueOf(rowindex));
					} else {
						//this.respond.print("");
						this.action("<<", "searchlockunlockaccount", "", "", "", "", "", "ACCNAVACTION=PREV");this.action(">>", "searchlockunlockaccount", "", "", "", "", "", "ACCNAVACTION=NEXT");
					}
				} else{
					this.respond.print(dat);
				}
				if (rowindex==0){
					this.endColumn();
				} else {
					this.endCell();
				}
				this._colIndex++;
			}
		this.endRow();
		if(doneRecs){
			this.fieldHidden("ACCTOPID", data.get(0).toString());
		}
	}
}

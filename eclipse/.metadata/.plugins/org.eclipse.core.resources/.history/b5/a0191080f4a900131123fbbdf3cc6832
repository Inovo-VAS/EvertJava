package baasserver.netty;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.Channel;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioServerSocketChannel;

import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.socket.SocketChannel;
import io.netty.handler.codec.DecoderResult;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpContent;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.handler.codec.http.multipart.Attribute;
import io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
import io.netty.handler.codec.http.multipart.DiskAttribute;
import io.netty.handler.codec.http.multipart.DiskFileUpload;
import io.netty.handler.codec.http.multipart.FileUpload;
import io.netty.handler.codec.http.multipart.HttpDataFactory;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.EndOfDataDecoderException;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.ErrorDataDecoderException;
import io.netty.handler.codec.http.multipart.InterfaceHttpData;
import io.netty.handler.codec.http.multipart.InterfaceHttpData.HttpDataType;
import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;
import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
import io.netty.util.CharsetUtil;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;

import baasserver.db.protocols.DBRequestHandle;

import static io.netty.handler.codec.http.HttpHeaders.Names.*;
import static io.netty.handler.codec.http.HttpHeaders.*;
import static io.netty.handler.codec.http.HttpMethod.*;
import static io.netty.handler.codec.http.HttpResponseStatus.*;
import static io.netty.handler.codec.http.HttpVersion.*;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.util.CharsetUtil;



public class NettyServer implements Runnable {

	private static final HttpDataFactory _factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);
	
    static {
        DiskFileUpload.deleteOnExitTemporaryFile = true; // should delete file
                                                         // on exit (in normal
                                                         // exit)
        DiskFileUpload.baseDirectory = null; // system temp directory
        DiskAttribute.deleteOnExitTemporaryFile = true; // should delete file on
                                                        // exit (in normal exit)
        DiskAttribute.baseDirectory = null; // system temp directory
    }
	
	private int _port=0;
	public NettyServer(int port){
		this._port=port;
	}
	
	@Override
	public void run() {
		EventLoopGroup bossGroup = new NioEventLoopGroup(1);
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
             .channel(NioServerSocketChannel.class)
             .childHandler(new ChannelInitializer<SocketChannel>() {
            	    @Override
            	    public void initChannel(SocketChannel ch) throws Exception {
            	        ChannelPipeline pipeline = ch.pipeline();
            	        pipeline.addLast("codec-http", new HttpServerCodec());
            	        pipeline.addLast("aggregator", new HttpObjectAggregator(65536));
            	        pipeline.addLast("handler", new SimpleChannelInboundHandler<Object>() {
            	            //private static final Logger logger = Logger.getLogger(WebSocketServerHandler.class.getName());

            	            private static final String WEBSOCKET_PATH = "/websocket";

            	            private WebSocketServerHandshaker handshaker;

            	            private DBRequestHandle _requestHandle=null;
            	            private ArrayList<byte[]> _responseBufferBytes=new ArrayList<byte[]>();
            	            
            	            private HttpPostRequestDecoder _decoder=null;
            	            
            	            @Override
            	            public void messageReceived(ChannelHandlerContext ctx, Object msg) throws Exception {
            	            	if(msg instanceof HttpRequest || msg instanceof HttpContent){
            	            		if(msg instanceof HttpRequest){
	            	            		HttpRequest req=(HttpRequest)msg;
	            	            		
	            	            		if(!req.getDecoderResult().isSuccess()){
	            	            			if (!req.getDecoderResult().isSuccess()) {
	                    	                    sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, BAD_REQUEST));
	                    	                    return;
	                    	                }
	            	            		}
	            	            		else{
		            	            		if(_requestHandle==null){
		            	            			_decoder=null;
		            	            			_requestHandle=new DBRequestHandle(false, true);
		            	            		}
	            	            			_responseBufferBytes.clear();
	            	            			_requestHandle.processRequestCommandLine(req.getMethod().name(), req.getUri(), req.getProtocolVersion().text());
	            	            		
	            	            			Iterator<Entry<String,String>> headersi= req.headers().iterator();
	            	            			while(headersi.hasNext()){
	            	            				Entry<String,String> headerEntry= headersi.next();
	            	            				_requestHandle.processRequestHeader(headerEntry.getKey(), headerEntry.getValue());
	            	            			}
	            	            			//_requestHandle.processRequestHeadersEnd();	
	            	            			if(!_requestHandle.reqRequestHeader("CONTENT-LENGTH").equals("")&&!_requestHandle.reqRequestHeader("CONTENT-LENGTH").equals("0")){
	            	            				
	            	            				
	            	            				try {
	            	            	                _decoder = new HttpPostRequestDecoder(_factory, req);
	            	            	            } catch (ErrorDataDecoderException e1) {
	            	            	                e1.printStackTrace();
	            	            	                //responseContent.append(e1.getMessage());
	            	            	                //writeResponse(ctx.channel());
	            	            	                ctx.channel().close();
	            	            	                return;
	            	            	            }
	            	            			}
	            	            		}
            	            		}
            	            		
            	            		if(_decoder!=null){
            	            			if(msg instanceof HttpContent){
	            	            			HttpContent content=(HttpContent)msg;
	            	            			try {
	            	                            _decoder.offer(content);
	            	                            
	            	                            try {
		            	                            while (_decoder.hasNext()) {
		            	                                InterfaceHttpData data = _decoder.next();
		            	                                if (data != null) {
		            	                                    try {
		            	                                        // new value
		            	                                    	if (data.getHttpDataType() == HttpDataType.Attribute) {
		            	                                            Attribute attribute = (Attribute) data;
		            	                                            String value;
		            	                                            try {
		            	                                                this._requestHandle.setReqParameter(attribute.getName(), attribute.getValue(), true);
		            	                                            } catch (IOException e1) {
		            	                                                // Error while reading data from File, only print name and error
		            	                                                e1.printStackTrace();
		            	                                                
		            	                                                return;
		            	                                            }
		            	                                            
		            	                                        } else {
		            	                                            
		            	                                            if (data.getHttpDataType() == HttpDataType.FileUpload) {
		            	                                                FileUpload fileUpload = (FileUpload) data;
		            	                                                if (fileUpload.isCompleted()) {
		            	                                                	if (fileUpload.length() < 10000) {
		            	                                                        //responseContent.append("\tContent of file\r\n");
		            	                                                        //try {
		            	                                                        //    responseContent.append(fileUpload.getString(fileUpload.getCharset()));
		            	                                                        //} catch (IOException e1) {
		            	                                                            // do nothing for the example
		            	                                                        //    e1.printStackTrace();
		            	                                                        //}
		            	                                                        //responseContent.append("\r\n");
		            	                                                    } else {
		            	                                                        //responseContent.append("\tFile too long to be printed out:" + fileUpload.length() + "\r\n");
		            	                                                    }
		            	                                                    // fileUpload.isInMemory();// tells if the file is in Memory
		            	                                                    // or on File
		            	                                                    // fileUpload.renameTo(dest); // enable to move into another
		            	                                                    // File dest
		            	                                                    // decoder.removeFileUploadFromClean(fileUpload); //remove
		            	                                                    // the File of to delete file
		            	                                                } else {
		            	                                                    //responseContent.append("\tFile to be continued but should not!\r\n");
		            	                                                }
		            	                                            }
		            	                                        }
		            	                                    	
		            	                                    } finally {
		            	                                        data.release();
		            	                                    }
		            	                                }
		            	                            }
	            	                            }
	            	                            catch(EndOfDataDecoderException exd){
	            	                            }
	            	                            
	            	                            if (content instanceof LastHttpContent) {
	            	                            	_decoder.destroy();
	            	                            	_decoder=null;
	            	                            }
	            	                            
	            	                        } catch (ErrorDataDecoderException e1) {
	            	                            e1.printStackTrace();
	            	                            //responseContent.append(e1.getMessage());
	            	                            //writeResponse(ctx.channel());
	            	                            ctx.channel().close();
	            	                            return;
	            	                        }
            	            			}
            	            		}
            	            		
            	            		_requestHandle.performRequest();
            	            		
            	            		if(_requestHandle.requestCompteted()){
            	            			_requestHandle.retrieveRequestBytesOutput(_responseBufferBytes);
            	            			while(!_responseBufferBytes.isEmpty()){
            	            				if(new String(_responseBufferBytes.remove(0)).equals("\r\n")){
            	            					break;
            	            				}
            	            			}
            	            			
            	            			FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, OK);
            	            			
            	            			for(String header:_requestHandle.reqResponseHeaderNames()){
            	            				StringBuilder headerValue=new StringBuilder();
            	            				headerValue.append(this._requestHandle.reqResponseHeader(header));
            	            				res.headers().add(header,headerValue.subSequence(0, headerValue.length()));
            	            				headerValue=null;
            	            			}
            	            			
            	            			if(!_responseBufferBytes.isEmpty()){
            	            				while(!_responseBufferBytes.isEmpty()){
            	            					res.content().writeBytes(_responseBufferBytes.remove(0));
                	            			}
            	            			}
            	            			
            	            			ChannelFuture f = ctx.channel().writeAndFlush(res);
                    	                if (!isKeepAlive(res) || res.getStatus().code() != 200) {
                    	                    f.addListener(ChannelFutureListener.CLOSE);
                    	                }
                    	                
                    	                _requestHandle.reset();
                    	                _requestHandle=null;
            	            		}
            	            	}
            	            }

            	            @Override
            	            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
            	                ctx.flush();
            	            }

            	            private void handleHttpRequest(ChannelHandlerContext ctx, FullHttpRequest req) throws Exception {
            	                // Handle a bad request.
            	                if (!req.getDecoderResult().isSuccess()) {
            	                    sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, BAD_REQUEST));
            	                    return;
            	                }

            	                // Allow only GET methods.
            	                if (req.getMethod() != GET) {
            	                    sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, FORBIDDEN));
            	                    return;
            	                }

            	                // Send the demo page and favicon.ico
            	                if ("/".equals(req.getUri())) {
            	                    //ByteBuf content = Unpooled.wrappedBuffer(array);// WebSocketServerIndexPage.getContent(getWebSocketLocation(req));
            	                    FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, OK);

            	                    res.headers().set(CONTENT_TYPE, "text/html; charset=UTF-8");
            	                    //setContentLength(res, content.readableBytes());

            	                    sendHttpResponse(ctx, req, res);
            	                    return;
            	                }
            	                if ("/favicon.ico".equals(req.getUri())) {
            	                    FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, NOT_FOUND);
            	                    sendHttpResponse(ctx, req, res);
            	                    return;
            	                }

            	                // Handshake
            	                WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(
            	                        getWebSocketLocation(req), null, false);
            	                handshaker = wsFactory.newHandshaker(req);
            	                if (handshaker == null) {
            	                    WebSocketServerHandshakerFactory.sendUnsupportedWebSocketVersionResponse(ctx.channel());
            	                } else {
            	                    handshaker.handshake(ctx.channel(), req);
            	                }
            	            }

            	            private void handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame frame) {

            	                // Check for closing frame
            	                if (frame instanceof CloseWebSocketFrame) {
            	                    handshaker.close(ctx.channel(), (CloseWebSocketFrame) frame.retain());
            	                    return;
            	                }
            	                if (frame instanceof PingWebSocketFrame) {
            	                    ctx.channel().write(new PongWebSocketFrame(frame.content().retain()));
            	                    return;
            	                }
            	                if (!(frame instanceof TextWebSocketFrame)) {
            	                    throw new UnsupportedOperationException(String.format("%s frame types not supported", frame.getClass()
            	                            .getName()));
            	                }

            	                // Send the uppercase string back.
            	                String request = ((TextWebSocketFrame) frame).text();
            	                //if (logger.isLoggable(Level.FINE)) {
            	                //    logger.fine(String.format("%s received %s", ctx.channel(), request));
            	                //}
            	                ctx.channel().write(new TextWebSocketFrame(request.toUpperCase()));
            	            }

            	            private void sendHttpResponse(
            	                    ChannelHandlerContext ctx, HttpRequest req, FullHttpResponse res) {
            	                // Generate an error page if response getStatus code is not OK (200).
            	                if (res.getStatus().code() != 200) {
            	                    ByteBuf buf = Unpooled.copiedBuffer(res.getStatus().toString(), CharsetUtil.UTF_8);
            	                    res.content().writeBytes(buf);
            	                    buf.release();
            	                    setContentLength(res, res.content().readableBytes());
            	                }

            	                // Send the response and close the connection if necessary.
            	                ChannelFuture f = ctx.channel().writeAndFlush(res);
            	                if (!isKeepAlive(req) || res.getStatus().code() != 200) {
            	                    f.addListener(ChannelFutureListener.CLOSE);
            	                }
            	            }

            	            @Override
            	            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
            	                cause.printStackTrace();
            	                ctx.close();
            	            }

            	            private String getWebSocketLocation(FullHttpRequest req) {
            	                return "ws://" + req.headers().get(HOST) + WEBSOCKET_PATH;
            	            }
            	        });
            	    }
            	    });

            Channel ch = b.bind(_port).sync().channel();
            System.out.println("Web socket server started at port " + _port + '.');
            System.out.println("Open your browser and navigate to http://localhost:" + _port + '/');

            ch.closeFuture().sync();
        } catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
	}

}

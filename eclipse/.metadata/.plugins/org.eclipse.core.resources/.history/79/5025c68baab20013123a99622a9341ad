package baasserver.scripting;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;

public class CodingScriptBroker {

	private Object _returnValue=null;
	private ArrayList<Object> _returnValues=new ArrayList<Object>();
	private ArrayList<Method> _methodsFound=new ArrayList<Method>();
	private ArrayList<ArrayList<Object>> _methodParamsFound=new ArrayList<ArrayList<Object>>();
	private ArrayList<Object> _objectValues=new ArrayList<Object>();
	private ArrayList<Integer> _bracketCodingOwnerIndexes=new ArrayList<Integer>();
	private HashMap<Long,ArrayList<Object>> _codingLoopIterators=new HashMap<Long,ArrayList<Object>>();
	private HashMap<Long,Long> _codingLoopReturnIndex=new HashMap<Long,Long>();
	private Object _codingIteratorValue=null;
	private int _commitCodingRespondIndex=-1;
	private boolean _returnValFromMethod=false;
	
	private int _codingBraseLevels=0;
	private HashMap<Integer,Integer> _codingValidBraseLevels=new HashMap<Integer,Integer>();
	private Object _objectToScript=null;
	
	public CodingScriptBroker(Object objectToScript) {
		this._objectToScript=objectToScript;
	}
	
	public Object codingIteratorValue(){
		return _codingIteratorValue;
	}
	
	private String _replaceComponent="";
	
	public void setReplaceComponent(String replaceComponent){
		this._replaceComponent=replaceComponent;
	}
	
	private String _replaceComponentStartMask="";
	
	public void setReplaceComponentStartMask(String replaceComponentMask){
		this._replaceComponentStartMask=replaceComponentMask;
	}
	
	private String _replaceComponentEndMask="";
	
	public void setReplaceComponentEndMask(String replaceComponentMask){
		this._replaceComponentEndMask=replaceComponentMask;
	}
	
	private int _codingSpecificLength=0;
	private ArrayList<String> _codingSpecific=new ArrayList<String>(codingSpecific(
				new String[]{";", // 0
						"=", // 1
						"{","}", //2,3
						"(",")", //4,5
						",", //6
						"\"", // 7
						"if","else if","else", //8,9,10
						"for","while", //11,12
						"iterator", //13
						"method", //14
						"params", //15
						"widget", //16
						"handleWidgetContent", //17
						"respond" //18
					}
				));
	
	private TreeMap<Long,Integer> _codingReadPhrases=new TreeMap<Long,Integer>();
	private TreeMap<Long,ArrayList<Object>> _codingReadContent=new TreeMap<Long,ArrayList<Object>>();
	private long _codingReadPhrasesIndex=0;
	
	private int _codingIndexStage=-1;
	private int _codingPrevIndexStage=-1;
	private String _codingPhrase="";
	
	public Object executeScriptObjectMethod(String methodName,Object[]methodParams) throws Exception{
		return this.executeObjectMethod(_objectToScript, methodName, methodParams);
	}
	
	public Object executeObjectMethod(Object object,String methodName,Object[]methodParams) throws Exception{
		Method objectMethod=baasserver.reflection.REFUtils.findMethod(methodName, object.getClass(), null, true);
		if(objectMethod!=null){
			return objectMethod.invoke(object, methodParams);
		}
		return null;
	}
	
	public int codingSpecificIndex(String codingPhraseToTest){
		if(codingPhraseToTest.length()>this._codingSpecificLength){
			return -1;
		}
		return this._codingSpecific.indexOf(codingPhraseToTest);
	}
	
	private long _ifConditionLevels=0;
	
	private ArrayList<Integer> _brasesLevelOwnersFound=new ArrayList<Integer>();
	
	private TreeMap<Long,Long> _brasesCodeOwnerPhraseRefs=new TreeMap<Long,Long>();
	
	private TreeMap<Long,TreeMap<Long,TreeMap<Long,ArrayList<Long>>>> _ifConditionLevelsMasterMappings=new TreeMap<Long,TreeMap<Long,TreeMap<Long,ArrayList<Long>>>>();
	
	private long _loopConditionLevels=0;
	
	private TreeMap<Long,TreeMap<Long,TreeMap<Long,ArrayList<Long>>>> _loopConditionLevelsMasterMappings=new TreeMap<Long,TreeMap<Long,TreeMap<Long,ArrayList<Long>>>>();
	
	private void reOrderCodingPhraseRead(int codingIndexStage,Long codingReadPhrasesIndex,long maxCodingSetIndex) {
		int nextCodingPhraseIndex=(codingReadPhrasesIndex<maxCodingSetIndex? this._codingReadPhrases.get((Long) (codingReadPhrasesIndex+1)):-1);
		//if, if else, else
		if(codingIndexStage==this.codingSpecificIndex("if")){
			_ifConditionLevels++;
			_brasesLevelOwnersFound.add(codingIndexStage);
			//if level Map
			TreeMap<Long,TreeMap<Long,ArrayList<Long>>> ifConditionLevelMap=_ifConditionLevelsMasterMappings.get((Long)_ifConditionLevels);
			if(ifConditionLevelMap==null){
				_ifConditionLevelsMasterMappings.put((Long)(long)(_ifConditionLevels), ifConditionLevelMap=new TreeMap<Long,TreeMap<Long,ArrayList<Long>>>());
			}
			
			TreeMap<Long,ArrayList<Long>> ifConditionLevelMapSections=null;
			ifConditionLevelMap.put((Long)(long)(ifConditionLevelMap.size()+1),ifConditionLevelMapSections=new TreeMap<Long,ArrayList<Long>>());
			
			ArrayList<Long> ifconditionRouting=new ArrayList<Long>();
			ifConditionLevelMapSections.put(codingReadPhrasesIndex,ifconditionRouting);
			
		}
		else if(codingIndexStage==this.codingSpecificIndex("else if")){
			_brasesLevelOwnersFound.add(codingIndexStage);
			
			TreeMap<Long,TreeMap<Long,ArrayList<Long>>> ifConditionLevelMap=_ifConditionLevelsMasterMappings.get((Long)_ifConditionLevels);
			
			TreeMap<Long,ArrayList<Long>> ifConditionLevelMapSections=ifConditionLevelMap.get((Long)(long)(ifConditionLevelMap.size()));
			
			ifConditionLevelMapSections.get(ifConditionLevelMapSections.lastKey()).set(2,(Long)codingReadPhrasesIndex);
			
			ArrayList<Long> ifconditionRouting=new ArrayList<Long>();
			ifConditionLevelMapSections.put(codingReadPhrasesIndex,ifconditionRouting);
			
		}
		else if(codingIndexStage==this.codingSpecificIndex("else")){
			_brasesLevelOwnersFound.add(codingIndexStage);
			
			TreeMap<Long,TreeMap<Long,ArrayList<Long>>> ifConditionLevelMap=_ifConditionLevelsMasterMappings.get((Long)_ifConditionLevels);
			
			TreeMap<Long,ArrayList<Long>> ifConditionLevelMapSections=ifConditionLevelMap.get((Long)(long)(ifConditionLevelMap.size()));
			
			ifConditionLevelMapSections.get(ifConditionLevelMapSections.lastKey()).set(2,(Long)codingReadPhrasesIndex);
			
			ArrayList<Long> ifconditionRouting=new ArrayList<Long>();
			ifConditionLevelMapSections.put(codingReadPhrasesIndex,ifconditionRouting);
		}
		//for while
		else if(codingIndexStage==this.codingSpecificIndex("for")||codingIndexStage==this.codingSpecificIndex("while")){
			_loopConditionLevels++;
			_brasesLevelOwnersFound.add(codingIndexStage);
			//loop level Map
			TreeMap<Long,TreeMap<Long,ArrayList<Long>>> loopConditionLevelMap=_loopConditionLevelsMasterMappings.get((Long)_loopConditionLevels);
			if(loopConditionLevelMap==null){
				_loopConditionLevelsMasterMappings.put((Long)(long)(_loopConditionLevels), loopConditionLevelMap=new TreeMap<Long,TreeMap<Long,ArrayList<Long>>>());
			}
			
			TreeMap<Long,ArrayList<Long>> loopConditionLevelMapSections=null;
			loopConditionLevelMap.put((Long)(long)(loopConditionLevelMap.size()+1),loopConditionLevelMapSections=new TreeMap<Long,ArrayList<Long>>());
			
			ArrayList<Long> ifconditionRouting=new ArrayList<Long>();
			loopConditionLevelMapSections.put(codingReadPhrasesIndex,ifconditionRouting);
		}
		//brase {, }
		else if(codingIndexStage==this.codingSpecificIndex("{")){
			Integer brasesLevelOwnerFound=_brasesLevelOwnersFound.get(_brasesLevelOwnersFound.size()-1);
			//if, else if , else
			if(brasesLevelOwnerFound==this.codingSpecificIndex("if")||brasesLevelOwnerFound==this.codingSpecificIndex("else if")||brasesLevelOwnerFound==this.codingSpecificIndex("else")){
				TreeMap<Long,TreeMap<Long,ArrayList<Long>>> ifConditionLevelMap=_ifConditionLevelsMasterMappings.get((Long)_ifConditionLevels);
				
				TreeMap<Long,ArrayList<Long>> ifConditionLevelMapSections=ifConditionLevelMap.get((Long)(long)(ifConditionLevelMap.size()));
				
				ifConditionLevelMapSections.get(ifConditionLevelMapSections.lastKey()).add(codingReadPhrasesIndex);
				
			}
			else if(brasesLevelOwnerFound==this.codingSpecificIndex("for")||brasesLevelOwnerFound==this.codingSpecificIndex("while")){
				TreeMap<Long,TreeMap<Long,ArrayList<Long>>> loopConditionLevelMap=_loopConditionLevelsMasterMappings.get((Long)_loopConditionLevels);
				
				TreeMap<Long,ArrayList<Long>> loopConditionLevelMapSections=loopConditionLevelMap.get((Long)(long)(loopConditionLevelMap.size()));
				
				loopConditionLevelMapSections.get(loopConditionLevelMapSections.lastKey()).add(codingReadPhrasesIndex);
			}
			
			brasesLevelOwnerFound=0;
		}
		else if(codingIndexStage==this.codingSpecificIndex("}")){
			Integer brasesLevelOwnerFound=_brasesLevelOwnersFound.remove(_brasesLevelOwnersFound.size()-1);
			int ifCodingOwner=0;
			if(brasesLevelOwnerFound==null){
				
			}
			else if(brasesLevelOwnerFound==(ifCodingOwner=this.codingSpecificIndex("if"))||brasesLevelOwnerFound==(ifCodingOwner=this.codingSpecificIndex("else if"))||brasesLevelOwnerFound==(ifCodingOwner=this.codingSpecificIndex("else"))){
				TreeMap<Long,TreeMap<Long,ArrayList<Long>>> ifConditionLevelMap=_ifConditionLevelsMasterMappings.get((Long)_ifConditionLevels);
				
				TreeMap<Long,ArrayList<Long>> ifConditionLevelMapSections=ifConditionLevelMap.get((Long)(long)(ifConditionLevelMap.size()));
				
				ArrayList<Long> ifConditionSectionValidationRouting=ifConditionLevelMapSections.get(ifConditionLevelMapSections.lastKey());
				ifConditionSectionValidationRouting.add(codingReadPhrasesIndex);
				
				if(nextCodingPhraseIndex>-1){
					if(nextCodingPhraseIndex==this.codingSpecificIndex("else if")||nextCodingPhraseIndex==this.codingSpecificIndex("else")){
						ifConditionSectionValidationRouting.add(codingReadPhrasesIndex+1);
					}
					else{
						for(Long ifConditionLevelMapSectionKey:ifConditionLevelMapSections.keySet()){
							ifConditionSectionValidationRouting=ifConditionLevelMapSections.get((Long)ifConditionLevelMapSectionKey);
							ifConditionSectionValidationRouting.add((Long)(codingReadPhrasesIndex+1));
						}
						if(_ifConditionLevels>0) _ifConditionLevels--;
					}
				}
			}
			else if(brasesLevelOwnerFound==this.codingSpecificIndex("for")||brasesLevelOwnerFound==this.codingSpecificIndex("while")){
				TreeMap<Long,TreeMap<Long,ArrayList<Long>>> loopConditionLevelMap=_loopConditionLevelsMasterMappings.get((Long)_loopConditionLevels);
				
				TreeMap<Long,ArrayList<Long>> loopConditionLevelMapSections=loopConditionLevelMap.get((Long)(long)(loopConditionLevelMap.size()));
				
				ArrayList<Long> loopConditionSectionValidationRouting=loopConditionLevelMapSections.get(loopConditionLevelMapSections.lastKey());
				loopConditionSectionValidationRouting.add(codingReadPhrasesIndex);
				
				if(nextCodingPhraseIndex>-1){
					loopConditionSectionValidationRouting.add(codingReadPhrasesIndex+1);
					if(_loopConditionLevels>0) _loopConditionLevels--;
				}
			}
		}
	}
	
	
	public void performCodingRead() throws Exception{
		this.putCodingReadPhrase(this.codingSpecificIndex(";"));
		this._codingReadPhrasesIndex=0;
		long maxCodingSetIndex=this._codingReadPhrases.lastKey();
		
		while((this._codingReadPhrasesIndex+=1)<=maxCodingSetIndex){
			this._codingIndexStage=this._codingReadPhrases.get((Long) this._codingReadPhrasesIndex);
			reOrderCodingPhraseRead(this._codingIndexStage,this._codingReadPhrasesIndex,maxCodingSetIndex);
		}
		
		this._codingReadPhrasesIndex=0;
		maxCodingSetIndex=this._codingReadPhrases.lastKey();
		
		this._ifConditionLevels=0;
		this._loopConditionLevels=0;
		this._brasesLevelOwnersFound.clear();
		
		this.incCodingReadPhraseIndex();
		
		while(this._codingReadPhrasesIndex<=maxCodingSetIndex){
			this._codingIndexStage=this._codingReadPhrases.get((Long) this._codingReadPhrasesIndex);
			this.performCodingPhraseRead(this._codingIndexStage,this._codingReadPhrasesIndex,maxCodingSetIndex);
		}
		
		this._codingReadPhrasesIndex=0;
	}
	
	private void performCodingPhraseRead(int codingIndexStage,
			long codingReadPhrasesIndex, long maxCodingSetIndex) throws Exception{
		if(this.codingSpecificIndex(";")==codingIndexStage){
			 if(this._commitCodingRespondIndex==this.codingSpecificIndex("respond")){
				 if(!this._returnValues.isEmpty()) this._returnValue=this._returnValues.remove(0);
				 if(this._returnValue!=null){
					 if(this._returnValue instanceof String){
						 this.executeScriptObjectMethod("writeBytes", new Object[]{((String)_returnValue).getBytes()});
					 }
					 else{
						 this.executeScriptObjectMethod("writeBytes", new Object[]{String.valueOf(_returnValue).getBytes()});
					 }
				 }
			 }
			 this._commitCodingRespondIndex=-1;
			 this._returnValFromMethod=false;
			 this.incCodingReadPhraseIndex();
		}
		else if(this.codingSpecificIndex("respond")==codingIndexStage){ 
			 _commitCodingRespondIndex=codingIndexStage;
			 this._returnValFromMethod=false;
			 this.incCodingReadPhraseIndex();
		}
		else if(this.codingSpecificIndex("\"")==codingIndexStage){
			 this._returnValues.add(this.getCodingReadContent(codingReadPhrasesIndex).remove(0));
			 if(!this._bracketCodingOwnerIndexes.isEmpty()){
				 if(this._bracketCodingOwnerIndexes.get(this._bracketCodingOwnerIndexes.size()-1)==this.codingSpecificIndex("method")){
					 if(!this._methodParamsFound.isEmpty()) this._methodParamsFound.get(0).add(this._returnValues.remove(0));
				 }
			 }
			 this._returnValFromMethod=false;
			 this.incCodingReadPhraseIndex();
		}
		else if(codingIndexStage==this.codingSpecificIndex("for")||codingIndexStage==this.codingSpecificIndex("while")){
			this._loopConditionLevels++;
			this._brasesLevelOwnersFound.add(codingIndexStage);
			this._returnValFromMethod=false;
			this.incCodingReadPhraseIndex();
		}
		else if(codingIndexStage==this.codingSpecificIndex("if")||codingIndexStage==this.codingSpecificIndex("else if")||codingIndexStage==this.codingSpecificIndex("else")){
			if(codingIndexStage==this.codingSpecificIndex("if")) this._ifConditionLevels++;
			this._brasesLevelOwnersFound.add(codingIndexStage);
			this._returnValFromMethod=false;
		}
		else if(this.codingSpecificIndex("handleWidgetContent")==codingIndexStage){
			 this.executeObjectMethod(this.getCodingReadContent(codingReadPhrasesIndex).remove(0), "handelContent", new Object[]{(HashMap<String,String>)this.getCodingReadContent(codingReadPhrasesIndex).remove(0),this._objectToScript});
			 //((IOWidgetHandle) this.getCodingReadContent(codingSetIndex).remove(0)).handelContent((HashMap<String,String>)this.getCodingReadContent(codingSetIndex).remove(0), this);
			 
			 _commitCodingRespondIndex=codingIndexStage;
			 this._returnValFromMethod=false;
			 this.incCodingReadPhraseIndex();
		 }
		else if(this.codingSpecificIndex(",")==codingIndexStage){
			 this._returnValFromMethod=false;
			 this.incCodingReadPhraseIndex();
		 }
		 else if(this.codingSpecificIndex("(")==codingIndexStage){
			 this._bracketCodingOwnerIndexes.add((_codingPrevIndexStage!=codingIndexStage?_codingPrevIndexStage:codingIndexStage));
			 this.incCodingReadPhraseIndex();
		 }
		 else if(this.codingSpecificIndex(")")==codingIndexStage){
			 int codeBracketOwnerIndex=this._bracketCodingOwnerIndexes.remove(this._bracketCodingOwnerIndexes.size()-1);
			 if(codeBracketOwnerIndex==this.codingSpecificIndex("method")){
				 if(!this._methodsFound.isEmpty()){
					 Object methodOwner=_objectValues.remove(0);
					 Method methodToInvoke=this._methodsFound.remove(_methodsFound.size()-1);
					 Object[] paramsFound=null;
					 if(_returnValFromMethod){
						 this._returnValues.add(_returnValue);
						 if(!this._methodParamsFound.isEmpty()) this._methodParamsFound.get(0).add(this._returnValues.remove(0));
						 _returnValFromMethod=false;
					 }
					 ArrayList<Object> params=this._methodParamsFound.remove(0);
					 if(params.isEmpty()){
						 paramsFound=null;
					 }
					 else{
						 paramsFound=params.toArray();
						 
						 params.clear();
					 }
					 
					 params=null;
					 
					 if(paramsFound!=null){
						 if(methodToInvoke.getParameterTypes().length!=paramsFound.length){
							Class<?>[] paramTypes=new Class<?>[paramsFound.length];
							for(int paramIndex=0;paramIndex<paramsFound.length;paramIndex++){
								paramTypes[paramIndex]=paramsFound[paramIndex].getClass();
							}
							methodToInvoke=baasserver.reflection.REFUtils.findMethod(methodToInvoke.getName(), methodOwner.getClass() ,paramTypes, false);
						 }
					 }
					 else{
						 if(methodToInvoke.getParameterTypes().length>0){
							 Class<?>[] paramTypes=new Class<?>[0];
							 methodToInvoke=baasserver.reflection.REFUtils.findMethod(methodToInvoke.getName(), methodOwner.getClass() ,paramTypes, false);
						 }
					 }
					 
					 if(methodToInvoke.getReturnType().equals(Void.TYPE)){
						 methodToInvoke.invoke(methodOwner, paramsFound);
					 }
					 else{
						try{
							this._returnValue=methodToInvoke.invoke(methodOwner, paramsFound);
							this._returnValFromMethod=true;
						}
						catch(Exception e){
							System.out.println(methodOwner.toString());
							
							System.out.println(methodToInvoke.toString());
							throw e;
						}
					 }
				 }
				 this.incCodingReadPhraseIndex();
			 }
			 else if(codeBracketOwnerIndex==this.codingSpecificIndex("if")||codeBracketOwnerIndex==this.codingSpecificIndex("else if")||codeBracketOwnerIndex==this.codingSpecificIndex("else")||codeBracketOwnerIndex==this.codingSpecificIndex("while")){
				 
				 if((boolean)this._returnValue){
					 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), codeBracketOwnerIndex);
					 this._codingIndexStage=codeBracketOwnerIndex;
				 }
				 else{
					 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), -1*codeBracketOwnerIndex);
					 this._codingIndexStage=codeBracketOwnerIndex;
				 }
				 _returnValFromMethod=false;
			 }
			 else if(codeBracketOwnerIndex==this.codingSpecificIndex("for")){
				 TreeMap<Long,TreeMap<Long,ArrayList<Long>>> loopConditionLevelMap=_loopConditionLevelsMasterMappings.get((Long)_loopConditionLevels);
					
				 TreeMap<Long,ArrayList<Long>> loopConditionLevelMapSections=loopConditionLevelMap.get((Long)(long)(loopConditionLevelMap.size()));
					
			 	 ArrayList<Long> loopConditionSectionValidationRouting=loopConditionLevelMapSections.get(loopConditionLevelMapSections.lastKey());
					
				 this._brasesLevelOwnersFound.add(codeBracketOwnerIndex);
				 
				 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), codeBracketOwnerIndex);
				 
				 this._codingIndexStage=codeBracketOwnerIndex;
				 ArrayList<Object> codingLoopIterator=null;
				 if(_codingLoopIterators.containsKey((Long)this._loopConditionLevels)){
					 codingLoopIterator=_codingLoopIterators.get((Long)this._loopConditionLevels);
				 }
				 else{
					 if(this._returnValue instanceof Object[]){
						 codingLoopIterator=new ArrayList<Object>();
						 for(Object arrValue:(Object[])this._returnValue){
							 codingLoopIterator.add(arrValue);
						 }
					 }
					 else{
						 codingLoopIterator=new ArrayList<Object>((ArrayList<Object>)this._returnValue); 
					 }
					 this._codingIteratorValue=codingLoopIterator.get(0);
					 _codingLoopIterators.put((Long)this._loopConditionLevels, codingLoopIterator);
					 _codingLoopReturnIndex.put((Integer)this._codingBraseLevels-1,(Long) codingReadPhrasesIndex);
				 }
				 _returnValFromMethod=false;
			 }
		 }
		 else if(this.codingSpecificIndex("widget")==codingIndexStage){
			this._objectValues.add(this.getCodingReadContent(codingReadPhrasesIndex).remove(0));
			this.incCodingReadPhraseIndex();
		 }
		 else if(this.codingSpecificIndex("iterator")==codingIndexStage){
			this._returnValues.add(this._returnValue=this._codingIteratorValue);
			if(!this._bracketCodingOwnerIndexes.isEmpty()){
				 if(this._bracketCodingOwnerIndexes.get(this._bracketCodingOwnerIndexes.size()-1)==this.codingSpecificIndex("method")){
					 if(!this._methodParamsFound.isEmpty()) this._methodParamsFound.get(0).add(this._returnValues.remove(0));
				 }
			 }
			 this._returnValFromMethod=false;
			 this.incCodingReadPhraseIndex();
		 }
		 else if(this.codingSpecificIndex("method")==codingIndexStage){
			String methodName=(String)this.getCodingReadContent(codingReadPhrasesIndex).remove(0);
			Class objClass=null;
			if(methodName.charAt(0)=='.'){
				methodName=methodName.substring(1);
				if(_returnValFromMethod){
					this._objectValues.add(this._returnValue);
					this._returnValFromMethod=false;
				}
				objClass=this._objectValues.get(0).getClass();
			}
			else{
				objClass=Class.forName(methodName.substring(0,methodName.lastIndexOf(".")));
				_objectValues.add(objClass);
			}
			
			Method methodFound=baasserver.reflection.REFUtils.findMethod(methodName, objClass, null,true);
			if(methodFound!=null){
				this._methodParamsFound.add(new ArrayList<Object>());
				this._methodsFound.add(methodFound);
			}
			this.incCodingReadPhraseIndex();
		 }
	}

	private long incCodingReadPhraseIndex(){
		_codingPrevIndexStage=this._codingIndexStage;
		return (this._codingReadPhrasesIndex+=1);
	}

	/*public void performCodingRead() throws Exception{
		this.putCodingReadPhrase(this.codingSpecificIndex(";"));
		
		if(!this._replaceComponent.equals("")&&!this._replaceComponentStartMask.equals("")){
			while(_replaceComponentStartMask.indexOf("[REPLACECOMPONENT]")>-1){
				_replaceComponentStartMask=_replaceComponentStartMask.substring(0,_replaceComponentStartMask.indexOf("[REPLACECOMPONENT]"))+_replaceComponent+_replaceComponentStartMask.substring(_replaceComponentStartMask.indexOf("[REPLACECOMPONENT]")+"[REPLACECOMPONENT]".length());
			}
			
			this.executeScriptObjectMethod("writeBytes", new Object[]{(_replaceComponentStartMask).getBytes()});
		}
		
		int max=Integer.MAX_VALUE;
		long codingSetIndex=0;
		long maxCodingSetIndex=this._codingReadPhrases.lastKey();
		while((codingSetIndex+=1)<=maxCodingSetIndex){
			 this._codingIndexStage=this._codingReadPhrases.get((Long) codingSetIndex);
			 if(!this.canExecuteCoding()&&(this._codingIndexStage!=this.codingSpecificIndex("{")&&this._codingIndexStage!=this.codingSpecificIndex("}"))){
				 this._codingPrevIndexStage=this._codingIndexStage;
				 continue;
			 }
			 if(this.codingSpecificIndex(";")==this._codingIndexStage){
				 if(this._commitCodingRespondIndex==this.codingSpecificIndex("respond")){
					 if(!this._returnValues.isEmpty()) this._returnValue=this._returnValues.remove(0);
					 if(this._returnValue!=null){
						 if(this._returnValue instanceof String){
							 this.executeScriptObjectMethod("writeBytes", new Object[]{((String)_returnValue).getBytes()});
						 }
						 else{
							 this.executeScriptObjectMethod("writeBytes", new Object[]{String.valueOf(_returnValue).getBytes()});
						 }
					 }
				 }
				 this._commitCodingRespondIndex=-1;
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("respond")==this._codingIndexStage){ 
				 _commitCodingRespondIndex=this._codingIndexStage;
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("\"")==this._codingIndexStage){
				 this._returnValues.add(this.getCodingReadContent(codingSetIndex).remove(0));
				 if(!this._bracketCodingOwnerIndexes.isEmpty()){
					 if(this._bracketCodingOwnerIndexes.get(this._bracketCodingOwnerIndexes.size()-1)==this.codingSpecificIndex("method")){
						 if(!this._methodParamsFound.isEmpty()) this._methodParamsFound.get(0).add(this._returnValues.remove(0));
					 }
				 }
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex(",")==this._codingIndexStage){
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("(")==this._codingIndexStage){
				 this._bracketCodingOwnerIndexes.add((_codingPrevIndexStage!=_codingIndexStage?_codingPrevIndexStage:this._codingIndexStage));
			 }
			 else if(this.codingSpecificIndex(")")==this._codingIndexStage){
				 int codeBracketOwnerIndex=this._bracketCodingOwnerIndexes.remove(this._bracketCodingOwnerIndexes.size()-1);
				 if(codeBracketOwnerIndex==this.codingSpecificIndex("method")){
					 if(!this._methodsFound.isEmpty()){
						 Object methodOwner=_objectValues.remove(0);
						 Method methodToInvoke=this._methodsFound.remove(_methodsFound.size()-1);
						 Object[] paramsFound=null;
						 if(_returnValFromMethod){
							 this._returnValues.add(_returnValue);
							 if(!this._methodParamsFound.isEmpty()) this._methodParamsFound.get(0).add(this._returnValues.remove(0));
							 _returnValFromMethod=false;
						 }
						 ArrayList<Object> params=this._methodParamsFound.remove(0);
						 if(params.isEmpty()){
							 paramsFound=null;
						 }
						 else{
							 paramsFound=params.toArray();
							 
							 params.clear();
						 }
						 
						 params=null;
						 
						 if(paramsFound!=null){
							 if(methodToInvoke.getParameterTypes().length!=paramsFound.length){
								Class<?>[] paramTypes=new Class<?>[paramsFound.length];
								for(int paramIndex=0;paramIndex<paramsFound.length;paramIndex++){
									paramTypes[paramIndex]=paramsFound[paramIndex].getClass();
								}
								methodToInvoke=baasserver.reflection.REFUtils.findMethod(methodToInvoke.getName(), methodOwner.getClass() ,paramTypes, false);
							 }
						 }
						 else{
							 if(methodToInvoke.getParameterTypes().length>0){
								 Class<?>[] paramTypes=new Class<?>[0];
								 methodToInvoke=baasserver.reflection.REFUtils.findMethod(methodToInvoke.getName(), methodOwner.getClass() ,paramTypes, false);
							 }
						 }
						 
						 if(methodToInvoke.getReturnType().equals(Void.TYPE)){
							 methodToInvoke.invoke(methodOwner, paramsFound);
						 }
						 else{
							try{
								this._returnValue=methodToInvoke.invoke(methodOwner, paramsFound);
								this._returnValFromMethod=true;
							}
							catch(Exception e){
								System.out.println(methodOwner.toString());
								
								System.out.println(methodToInvoke.toString());
								throw e;
							}
						 }
					 }
				 }
				 else if(codeBracketOwnerIndex==this.codingSpecificIndex("if")||codeBracketOwnerIndex==this.codingSpecificIndex("else if")||codeBracketOwnerIndex==this.codingSpecificIndex("else")||codeBracketOwnerIndex==this.codingSpecificIndex("while")){
					 if((boolean)this._returnValue){
						 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), codeBracketOwnerIndex);
						 this._codingIndexStage=codeBracketOwnerIndex;
					 }
					 else{
						 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), -1*codeBracketOwnerIndex);
						 this._codingIndexStage=codeBracketOwnerIndex;
					 }
					 _returnValFromMethod=false;
				 }
				 else if(codeBracketOwnerIndex==this.codingSpecificIndex("for")){
					 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), codeBracketOwnerIndex);
					 this._codingIndexStage=codeBracketOwnerIndex;
					 ArrayList<Object> codingLoopIterator=null;
					 if(_codingLoopIterators.containsKey((Integer)this._codingBraseLevels-1)){
						 codingLoopIterator=_codingLoopIterators.get((Integer)this._codingBraseLevels-1);
					 }
					 else{
						 if(this._returnValue instanceof Object[]){
							 codingLoopIterator=new ArrayList<Object>();
							 for(Object arrValue:(Object[])this._returnValue){
								 codingLoopIterator.add(arrValue);
							 }
						 }
						 else{
							 codingLoopIterator=new ArrayList<Object>((ArrayList<Object>)this._returnValue); 
						 }
						 this._codingIteratorValue=codingLoopIterator.get(0);
						 _codingLoopIterators.put((Integer)this._codingBraseLevels-1, codingLoopIterator);
						 _codingLoopReturnIndex.put((Integer)this._codingBraseLevels-1, codingSetIndex);
					 }
					 _returnValFromMethod=false;
				 }
			 }
			 else if(this.codingSpecificIndex("{")==this._codingIndexStage){
				 this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels), this._codingValidBraseLevels.get((Integer)(this._codingBraseLevels-=1)));
				 this._codingBraseLevels++;
				 _commitCodingRespondIndex=this._codingIndexStage;
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("}")==this._codingIndexStage){
				 int codeBracketOwnerIndex=this._codingValidBraseLevels.remove((Integer)(this._codingBraseLevels--));
				 if(codeBracketOwnerIndex==this.codingSpecificIndex("if")||codeBracketOwnerIndex==this.codingSpecificIndex("else if")||codeBracketOwnerIndex==this.codingSpecificIndex("while")){
					 this._codingValidBraseLevels.remove((Integer)(this._codingBraseLevels));
				 }
				 else if((-1*codeBracketOwnerIndex)==this.codingSpecificIndex("if")||(-1*codeBracketOwnerIndex)==this.codingSpecificIndex("else if")||(-1*codeBracketOwnerIndex)==this.codingSpecificIndex("while")){
					 this._codingValidBraseLevels.remove((Integer)(this._codingBraseLevels));
				 }
				 else if(codeBracketOwnerIndex==this.codingSpecificIndex("for")){
					ArrayList<Object> codingLoopIterator=this._codingLoopIterators.get((Integer)this._codingBraseLevels);
					if(!codingLoopIterator.isEmpty()){
						codingLoopIterator.remove(0);
					}
					if(!codingLoopIterator.isEmpty()){
						codingSetIndex=_codingLoopReturnIndex.get((Integer)this._codingBraseLevels);
						this._codingIteratorValue=codingLoopIterator.get(0);
						this._codingValidBraseLevels.put((Integer)(this._codingBraseLevels++), codeBracketOwnerIndex);
					}
					else{
						this._codingLoopReturnIndex.remove((Integer)this._codingBraseLevels);
						this._codingLoopIterators.remove((Integer)this._codingBraseLevels);
						// TODO CORRECT ANY BRASE CODING LEVEL RELATED RETURN POINTS
					}	
				 }
				 _commitCodingRespondIndex=this._codingIndexStage;
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("if")==this._codingIndexStage){
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("else if")==this._codingIndexStage){
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("else")==this._codingIndexStage){
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("for")==this._codingIndexStage){
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("while")==this._codingIndexStage){
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("handleWidgetContent")==this._codingIndexStage){
				 this.executeObjectMethod(this.getCodingReadContent(codingSetIndex).remove(0), "handelContent", new Object[]{(HashMap<String,String>)this.getCodingReadContent(codingSetIndex).remove(0),this._objectToScript});
				 //((IOWidgetHandle) this.getCodingReadContent(codingSetIndex).remove(0)).handelContent((HashMap<String,String>)this.getCodingReadContent(codingSetIndex).remove(0), this);
				 
				 _commitCodingRespondIndex=this._codingIndexStage;
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("widget")==this._codingIndexStage){
				this._objectValues.add(this.getCodingReadContent(codingSetIndex).remove(0));
				
			 }
			 else if(this.codingSpecificIndex("iterator")==this._codingIndexStage){
				this._returnValues.add(this._returnValue=this._codingIteratorValue);
				if(!this._bracketCodingOwnerIndexes.isEmpty()){
					 if(this._bracketCodingOwnerIndexes.get(this._bracketCodingOwnerIndexes.size()-1)==this.codingSpecificIndex("method")){
						 if(!this._methodParamsFound.isEmpty()) this._methodParamsFound.get(0).add(this._returnValues.remove(0));
					 }
				 }
				 this._returnValFromMethod=false;
			 }
			 else if(this.codingSpecificIndex("method")==this._codingIndexStage){
				String methodName=(String)this.getCodingReadContent(codingSetIndex).remove(0);
				Class objClass=null;
				if(methodName.charAt(0)=='.'){
					methodName=methodName.substring(1);
					if(_returnValFromMethod){
						this._objectValues.add(this._returnValue);
						this._returnValFromMethod=false;
					}
					objClass=this._objectValues.get(0).getClass();
				}
				else{
					objClass=Class.forName(methodName.substring(0,methodName.lastIndexOf(".")));
					_objectValues.add(objClass);
				}
				
				Method methodFound=baasserver.reflection.REFUtils.findMethod(methodName, objClass, null,true);
				if(methodFound!=null){
					this._methodParamsFound.add(new ArrayList<Object>());
					this._methodsFound.add(methodFound);
				}
			 }
			 this._codingPrevIndexStage=this._codingIndexStage;
		}
		
		if(!this._replaceComponent.equals("")&&!this._replaceComponentEndMask.equals("")){
			while(_replaceComponentEndMask.indexOf("[REPLACECOMPONENT]")>-1){
				_replaceComponentEndMask=_replaceComponentEndMask.substring(0,_replaceComponentEndMask.indexOf("[REPLACECOMPONENT]"))+_replaceComponent+_replaceComponentEndMask.substring(_replaceComponentEndMask.indexOf("[REPLACECOMPONENT]")+"[REPLACECOMPONENT]".length());
			}
			
			this.executeScriptObjectMethod("writeBytes", new Object[]{(_replaceComponentEndMask).getBytes()});
		}
		
		resetBroker();
	}*/
	
	
	
	

	private boolean canExecuteCoding() {
		if(this._codingValidBraseLevels.containsKey((Integer)this._codingBraseLevels)){
			return (this._codingValidBraseLevels.get((Integer)this._codingBraseLevels)>-1);
		}
		return true;
	}

	private TreeMap<Long,ArrayList<Long>> _ifConditionCodeReadPhraseRouting=new TreeMap<Long,ArrayList<Long>>();
	private ArrayList<Long> _ifConditionParentCodeReadPhrase=new ArrayList<Long>();
	
	public int putCodingReadPhrase(int codingPhraseIndex) {
		if(codingPhraseIndex>-1){
			if(codingPhraseIndex==this.codingSpecificIndex("if")){
				if(this._codingPrevIndexStage==this.codingSpecificIndex("else")){
					this._codingReadPhrases.put((Long)(_codingReadPhrasesIndex),this.codingSpecificIndex("else if"));
				}
				else{
					this._codingReadPhrases.put((Long)(_codingReadPhrasesIndex+=1),codingPhraseIndex);
				}
				this._codingPrevIndexStage=-1;
			}
			else if(codingPhraseIndex==this.codingSpecificIndex("else")){
				this._codingReadPhrases.put((Long)(_codingReadPhrasesIndex+=1),codingPhraseIndex);
			}
			else{
				this._codingReadPhrases.put((Long)(_codingReadPhrasesIndex+=1),codingPhraseIndex);
			}
			this._codingPhrase="";
		}
		return codingPhraseIndex;
	}
	
	public void putCodingReadContent(Object codingReadContent) {
		ArrayList<Object> codingReadContentRead=null;
		if(this._codingReadContent.containsKey((Long)this._codingReadPhrasesIndex)){
			codingReadContentRead=this._codingReadContent.get((Long)this._codingReadPhrasesIndex);
		}
		else{
			_codingReadContent.put((Long)this._codingReadPhrasesIndex, (codingReadContentRead=new ArrayList<Object>()));
		}
		codingReadContentRead.add(codingReadContent);
	}
	
	public void appendStringTocoding(String stringToAppend) {
		this.putCodingReadPhrase(codingSpecificIndex("respond"));
		this.putCodingReadPhrase(codingSpecificIndex("\""));
		this.putCodingReadContent(stringToAppend);
		this.putCodingReadPhrase(codingSpecificIndex(";"));
	}
	
	private HashMap<Long,ArrayList<Object>> _codingReadContentMap=new HashMap<Long,ArrayList<Object>>();
	
	private ArrayList<Object> getCodingReadContent(long codingReadContentIndex) {
		ArrayList<Object> codingReadContentRef=null;
		if(_codingReadContentMap.containsKey((Long)codingReadContentIndex)){
			codingReadContentRef=_codingReadContentMap.get((Long)codingReadContentIndex);
			if(codingReadContentRef.isEmpty()){
				codingReadContentRef=null;
			}
		}
		if(codingReadContentRef==null){
			_codingReadContentMap.put((Long)codingReadContentIndex,(codingReadContentRef=new ArrayList<Object>(this._codingReadContent.get((Long)codingReadContentIndex))));
		}
		return codingReadContentRef;
	}

	private char _prevCC=0;
	
	private ArrayList<String> codingSpecific(String[] codingWords) {
		 ArrayList<String> codingSpecific=new ArrayList<String>();
		for(String codingW:codingWords){
			if(_codingSpecificLength<codingW.length()) _codingSpecificLength=codingW.length();
			codingSpecific.add(codingW);
		}
		return codingSpecific;
	}
	
	private void nextMaskCodeCharToExecute(char cc) throws Exception{
		if(this._codingIndexStage==this.codingSpecificIndex("\"")){
			if(this.codingSpecificIndex((cc+""))==this.codingSpecificIndex("\"")){
				String codingString=this._codingPhrase;
				this.putCodingReadPhrase(this.codingSpecificIndex("\""));
				this.putCodingReadContent(codingString);
				this._codingIndexStage=-1;
			}
			else{
				this._codingPhrase+=cc;
			}
		}
		else{
			this._codingPhrase+=cc;
			switch(cc){
			case '=':
				if(this._prevCC==0||"{}();".indexOf(_prevCC)>-1){
					this.putCodingReadPhrase(this.codingSpecificIndex("respond"));
				}
				else{
					this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				}
				break;
			case '(':
				this._codingPhrase=this._codingPhrase.substring(0,this._codingPhrase.length()-1);
				if(!this._codingPhrase.equals("")){
					String methodName=this._codingPhrase;
					this.putCodingReadPhrase(this.codingSpecificIndex("method"));
					this.putCodingReadContent(methodName);
				}
				this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				break;
			case ')':
				this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				break;
			case '{':
				this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				break;
			case '}':
				this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				break;
			case ',':
				this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				break;
			case ';':
				this.putCodingReadPhrase(this.codingSpecificIndex((cc+"")));
				break;
			case '\"':
				this._codingIndexStage=this.codingSpecificIndex((cc+""));
				this._codingPhrase="";
				break;
			default:
				if(this._codingPhrase.length()<=this._codingSpecificLength){
					
					if((this._codingIndexStage=this.putCodingReadPhrase(this.codingSpecificIndex(this._codingPhrase)))>-1){
						if(this._codingIndexStage==this.codingSpecificIndex("widget")){ //widget
							this.putCodingReadContent(executeScriptObjectMethod("currentWidget",null));
						}
						//this._codingPrevIndexStage=this._codingIndexStage;
					}
				}
				else{
					
				}
				break;
			}
		}
		if(this._codingIndexStage>-1) this._codingPrevIndexStage=this._codingIndexStage;
	}
	
	public void loadMaskCodeByte(byte br, boolean debug) throws Exception{
		char cc=(char)br;
		if(debug) System.out.print(cc);
		if(this._codingIndexStage==this.codingSpecificIndex("\"")){
			this.nextMaskCodeCharToExecute(cc);
		}
		else{
			if(!(cc+"").trim().equals("")){
				this.nextMaskCodeCharToExecute(cc);
			}
		}
	}
	
	public void resetBroker(){
		this._prevCC=0;
		while(!this._codingReadContentMap.isEmpty()){
			this._codingReadContentMap.remove(this._codingReadContentMap.keySet().toArray()[0]).clear();
		}
		this._returnValue=null;
		
		_codingReadPhrases.clear();
		
		while(!_codingReadContent.isEmpty()){
			_codingReadContent.remove((Long)_codingReadContent.firstKey()).clear();
		}
		this._codingReadPhrasesIndex=0;
		
		this._codingIndexStage=-1;
		this._codingPrevIndexStage=-1;
		this._codingPhrase="";
		
		this._returnValues.clear();
		this._methodsFound.clear();
		while(!_methodParamsFound.isEmpty()) _methodParamsFound.remove(0).clear();
		this._objectValues.clear();
		this._bracketCodingOwnerIndexes.clear();
		while(!_codingLoopIterators.isEmpty()){
			this._codingLoopIterators.remove(_codingLoopIterators.keySet().toArray()[0]).clear();
		}
		this._codingLoopReturnIndex.clear();
		this._codingIteratorValue=null;
		this._commitCodingRespondIndex=-1;
		this._returnValFromMethod=false;
		
		this._codingBraseLevels=0;
		this._codingValidBraseLevels.clear();
		this._replaceComponent="";
		this._replaceComponentStartMask="";
		this._replaceComponentEndMask="";		
	}
}

package baasserver;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.spi.SelectorProvider;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import baasserver.protocols.IORequestHandle;
import baasserver.protocols.IOutput;

public class Server implements Runnable {

	private static ExecutorService _runningServers=Executors.newCachedThreadPool();
	private static ExecutorService _acceptedChannels=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()*20);
	
	private int _port;
	private ServerSocketChannel _serverSocketChannel=null;
	private Selector _selServer;
	private Class<?> _ioRequestHandleClass=null;
	private Server(int port,Class<?> ioRequestHandleClass) throws IOException {
		this._ioRequestHandleClass=ioRequestHandleClass;
		this._port=port;
		this._serverSocketChannel=ServerSocketChannel.open();
		this._serverSocketChannel.configureBlocking(false);
		this._selServer=SelectorProvider.provider().openSelector();
		
		this._serverSocketChannel.socket().bind(new InetSocketAddress(_port),Runtime.getRuntime().availableProcessors()*10);
		this._serverSocketChannel.register(_selServer, SelectionKey.OP_ACCEPT);
	}
	
	private boolean _shutdownServer=false;
	
	public void shutdownServer(){
		this._shutdownServer=true;
	}
	
	@Override
	public void run() {
		while(!_shutdownServer){
			try {
				while(this._selServer.select()>0){
					if(!_shutdownServer){
						Iterator<SelectionKey> selKeysAccepted= this._selServer.selectedKeys().iterator();
						
						while(selKeysAccepted.hasNext()){
							SelectionKey selKeyAccept=selKeysAccepted.next();
							if(!_shutdownServer){
								if(selKeyAccept.isValid()){
									if(selKeyAccept.isAcceptable()){
										_acceptedChannels.execute(new ServerSocketHandle(this,this._serverSocketChannel.accept()));
									}
								}
							}
							selKeysAccepted.remove();
						}
						if(_shutdownServer){
							break;
						}
					}
					else{
						break;
					}
				}
			} catch (IOException e1) {
				_shutdownServer=true;
				e1.printStackTrace();
			}
			if(!_shutdownServer){
				try {
					Thread.sleep(2);
				} catch (InterruptedException e) {
					_shutdownServer=true;
					e.printStackTrace();
				}
			}
		}
		try {
			this._selServer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			this._serverSocketChannel.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		new Thread(){
			public void run() {
				_acceptedChannels.shutdownNow();
				_runningServers.shutdownNow();
				baasserver.io.Logger.shutdownLogging();
			};
		}.start();
	}
	
	public static void initServer(int port,Class ioRequestClass){
		try {
			_runningServers.execute(new Server(port,ioRequestClass));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public IORequestHandle nextIORequestHandle(IOutput output) throws Exception{
		return (IORequestHandle)this._ioRequestHandleClass.getConstructor(IOutput.class).newInstance(new Object[]{output});
	}

}

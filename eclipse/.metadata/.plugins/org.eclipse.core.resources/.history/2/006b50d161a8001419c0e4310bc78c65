package inovo.automated.work.steps;

import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.HashMap;

import inovo.automated.work.AutomatedWorker;
import inovo.automated.work.AutomatedWorkerStep;
import inovo.db.Database;

public class ImportFileStep extends AutomatedWorkerStep {

	public ImportFileStep(AutomatedWorker automatedWorker,
			HashMap<String, String> stepProperties) {
		super(automatedWorker, stepProperties);
	}

	private File _fileDir=null;
	
	private ArrayList<String> _filemaskSections=new ArrayList<String>();
	
	@Override
	public void performAutomationStep() {
		this.stepProperties().put("INLINESQLCOMMAND", "");
		this.stepProperties().put("COMADELIM", "");
		this.stepProperties().put("SOURCEPATH", "");
		this.stepProperties().put("CURRENTFILEFIELDS", "");
		this.stepProperties().put("FILELOOKUPMASK", "");
		
		try {
			Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE WHERE STEP_ID=:STEPID", this.stepProperties(), null);
			
		} catch (Exception e) {
		}
		
		_fileDir=new File(this.stepProperties().get("SOURCEPATH"));
		if(_fileDir.isDirectory()){
			File[]	filesFound=_fileDir.listFiles(new FilenameFilter() {
				
				@Override
				public boolean accept(File file, String name) {
					_filemaskSections.clear();
					name=name.toLowerCase();
					String[]fileMask=stepProperties().get("FILELOOKUPMASK").toLowerCase().split("[*]");
					for(int maskindex=0;maskindex<fileMask.length;maskindex++){
						String fsec=fileMask[maskindex];
						if(maskindex==0){
							if(name.startsWith(fsec)){
								name=name.substring(fsec.length());
							}
						}
						else if(maskindex==fileMask.length-1){
							if(!name.endsWith(fsec)){
								name="";
							}
						}
						else{
							if(name.indexOf(fsec)>-1){
								name=name.substring(name.indexOf(fsec)+fsec.length());
							}
							else{
								name="";
								break;
							}
						}
					}
					
					return !name.equals("");
				}
			});
			
			if(filesFound!=null){
				if(filesFound.length>0){
					try {
						while(!filesFound[0].renameTo(filesFound[0])){
							Thread.sleep(2000);
						}
						this.processImportFile(filesFound[0]);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
	}

	private HashMap<String,String> _fileimportrequestsettings=HashMap<String, String>();
	
	private void processImportFile(File fileToImport) throws Exception{
		FileInputStream fileIn=new FileInputStream(fileToImport);
		
		Database.populateDatasetFromFlatFileStream(null, "CSV", fileIn, null, this.stepProperties().get("COMADELIM").charAt(0),this,"readImportFileData");
	}
	
	public void readImportFileData(Integer rowIndex,ArrayList<String> rowData,ArrayList<String> rowColumns){
		if(rowIndex==0){
			
		}
	}
}

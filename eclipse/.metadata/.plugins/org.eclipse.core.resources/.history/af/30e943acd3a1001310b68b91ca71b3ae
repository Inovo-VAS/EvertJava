package baasserver.io.nio.netty;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.DefaultHttpResponse;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpVersion;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;
import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
import io.netty.util.CharsetUtil;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.sun.xml.internal.fastinfoset.algorithm.IEEE754FloatingPointEncodingAlgorithm;

import baasserver.db.protocols.DBRequestHandle;

import static io.netty.handler.codec.http.HttpHeaders.Names.*;
import static io.netty.handler.codec.http.HttpHeaders.*;
import static io.netty.handler.codec.http.HttpMethod.*;
import static io.netty.handler.codec.http.HttpResponseStatus.*;
import static io.netty.handler.codec.http.HttpVersion.*;

public class ServerHandler extends SimpleChannelInboundHandler<Object> {
    private static final Logger logger = Logger.getLogger(ServerHandler.class.getName());

    private static final String WEBSOCKET_PATH = "/websocket";

    private WebSocketServerHandshaker handshaker;

    private ArrayList<byte[]> _bytesContentResponse=new ArrayList<byte[]>();
    
    @Override
    public void messageReceived(ChannelHandlerContext ctx, Object msg) throws Exception {
        if (msg instanceof FullHttpRequest) {
            handleHttpRequest(ctx, (FullHttpRequest) msg);
        } else if (msg instanceof WebSocketFrame) {
            handleWebSocketFrame(ctx, (WebSocketFrame) msg);
        }
    }

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
        ctx.flush();
    }

    private void handleHttpRequest(ChannelHandlerContext ctx, FullHttpRequest req) throws Exception {
        // Handle a bad request.
        if (!req.getDecoderResult().isSuccess()) {
            sendHttpResponse(ctx, req, new DefaultFullHttpResponse(HTTP_1_1, BAD_REQUEST));
            return;
        }

        // Send the demo page and favicon.ico
        if (req.getUri().startsWith("/")) {
        	
        	DBRequestHandle dbrequestHandle=new DBRequestHandle(false, true);
        	
        	dbrequestHandle.processRequestCommandLine(req.getMethod().name(), req.getUri(), req.getProtocolVersion().text());
        	HttpHeaders headers=req.headers();
        	
        	Iterator<Entry<String,String>> iheader= headers.iterator();
        	while(iheader.hasNext()){
        		Entry<String,String> hentry=iheader.next();
        		dbrequestHandle.processRequestHeader(hentry.getKey(), hentry.getValue());
        	}
        	dbrequestHandle.dontRespondResponseHeaders();
        	dbrequestHandle.processRequestHeadersEnd();
        	
        	dbrequestHandle.reqResponseHeaderNames();
        	
        	FullHttpResponse response = (FullHttpResponse) new DefaultFullHttpResponse(HTTP_1_1, OK);

        	
        	
        	for(final String responseHeader:dbrequestHandle.reqResponseHeaderNames()){
        		StringBuilder strValue=new StringBuilder();
				strValue.append(dbrequestHandle.reqResponseHeader(responseHeader));
				CharSequence sqValue=strValue.subSequence(0, strValue.length());
            	response.headers().set(responseHeader,sqValue);
        	}

        	
        	response.headers().set(CONNECTION,HttpHeaders.Values.CLOSE);
        	_bytesContentResponse.clear();
        	
        	dbrequestHandle.retrieveRequestBytesOutput(_bytesContentResponse);
        	
        	ByteBuf buffBuf=null;
        	while(!_bytesContentResponse.isEmpty()){
        		byte[] responsebytes=_bytesContentResponse.remove(0);
        		System.out.print(new String(responsebytes));
        		buffBuf=Unpooled.copiedBuffer(responsebytes);
        		response.content().writeBytes(buffBuf);
        	}
        	
        	ctx.write(response);
        	
        	// Write the end marker
            ChannelFuture lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);

            // Decide whether to close the connection or not.
            if (!isKeepAlive(response)) {
                // Close the connection when the whole content is written out.
                lastContentFuture.addListener(ChannelFutureListener.CLOSE);
            }
        	
        	
        	
        	//ByteBuf buffBuf=Unpooled.copiedBuffer(array)
        	// ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
            //ByteBuf content = WebSocketServerIndexPage.getContent(getWebSocketLocation(req));
            //FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, OK, content);

            //res.headers().set(CONTENT_TYPE, "text/html; charset=UTF-8");
            //setContentLength(res, content.readableBytes());

            //sendHttpResponse(ctx, req, res);
            return;
        }
        if ("/favicon.ico".equals(req.getUri())) {
            FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, NOT_FOUND);
            sendHttpResponse(ctx, req, res);
            return;
        }

        // Handshake
        WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(
                getWebSocketLocation(req), null, false);
        handshaker = wsFactory.newHandshaker(req);
        if (handshaker == null) {
            WebSocketServerHandshakerFactory.sendUnsupportedWebSocketVersionResponse(ctx.channel());
        } else {
            handshaker.handshake(ctx.channel(), req);
        }
    }

    private void handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame frame) {

        // Check for closing frame
        if (frame instanceof CloseWebSocketFrame) {
            handshaker.close(ctx.channel(), (CloseWebSocketFrame) frame.retain());
            return;
        }
        if (frame instanceof PingWebSocketFrame) {
            ctx.channel().write(new PongWebSocketFrame(frame.content().retain()));
            return;
        }
        if (!(frame instanceof TextWebSocketFrame)) {
            throw new UnsupportedOperationException(String.format("%s frame types not supported", frame.getClass()
                    .getName()));
        }

        // Send the uppercase string back.
        String request = ((TextWebSocketFrame) frame).text();
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(String.format("%s received %s", ctx.channel(), request));
        }
        ctx.channel().write(new TextWebSocketFrame(request.toUpperCase()));
    }

    private static void sendHttpResponse(
            ChannelHandlerContext ctx, FullHttpRequest req, FullHttpResponse res) {
        // Generate an error page if response getStatus code is not OK (200).
        if (res.getStatus().code() != 200) {
            ByteBuf buf = Unpooled.copiedBuffer(res.getStatus().toString(), CharsetUtil.UTF_8);
            res.content().writeBytes(buf);
            buf.release();
            setContentLength(res, res.content().readableBytes());
        }

        // Send the response and close the connection if necessary.
        ChannelFuture f = ctx.channel().writeAndFlush(res);
        if (!isKeepAlive(req) || res.getStatus().code() != 200) {
            f.addListener(ChannelFutureListener.CLOSE);
        }
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        cause.printStackTrace();
        ctx.close();
    }

    private static String getWebSocketLocation(FullHttpRequest req) {
        return "ws://" + req.headers().get(HOST) + WEBSOCKET_PATH;
    }
}

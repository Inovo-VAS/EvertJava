package inovo.automated.work.steps;

import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import inovo.automated.work.AutomatedWorker;
import inovo.automated.work.AutomatedWorkerStep;
import inovo.db.Database;

public class ImportFileStep extends AutomatedWorkerStep {

	public ImportFileStep(AutomatedWorker automatedWorker,
			HashMap<String, String> stepProperties) {
		super(automatedWorker, stepProperties);
	}

	private File _fileDir=null;
	
	private ArrayList<String> _filemaskSections=new ArrayList<String>();
	
	@Override
	public void performAutomationStep() {
		this.stepProperties().put("INLINESQLCOMMAND", "");
		this.stepProperties().put("COMADELIM", "");
		this.stepProperties().put("SOURCEPATH", "");
		this.stepProperties().put("CURRENTFILEFIELDS", "");
		this.stepProperties().put("FILELOOKUPMASK", "");
		
		try {
			Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE WHERE STEP_ID=:STEPID", this.stepProperties(), null);
			
		} catch (Exception e) {
		}
		
		_fileDir=new File(this.stepProperties().get("SOURCEPATH"));
		if(_fileDir.isDirectory()){
			File[]	filesFound=_fileDir.listFiles(new FilenameFilter() {
				
				@Override
				public boolean accept(File file, String name) {
					_filemaskSections.clear();
					name=name.toLowerCase();
					String[]fileMask=stepProperties().get("FILELOOKUPMASK").toLowerCase().split("[*]");
					for(int maskindex=0;maskindex<fileMask.length;maskindex++){
						String fsec=fileMask[maskindex];
						if(maskindex==0){
							if(name.startsWith(fsec)){
								name=name.substring(fsec.length());
							}
						}
						else if(maskindex==fileMask.length-1){
							if(!name.endsWith(fsec)){
								name="";
							}
						}
						else{
							if(name.indexOf(fsec)>-1){
								name=name.substring(name.indexOf(fsec)+fsec.length());
							}
							else{
								name="";
								break;
							}
						}
					}
					
					return !name.equals("");
				}
			});
			
			if(filesFound!=null){
				if(filesFound.length>0){
					try {
						while(!filesFound[0].renameTo(filesFound[0])){
							Thread.sleep(2000);
						}
						this.processImportFile(filesFound[0]);
						
					} catch (Exception e) {
						e.printStackTrace();
					}
					if(_fileIn!=null){
						try {
							_fileIn.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
						_fileIn=null;
						
					}
				}
			}
		}
	}

	private HashMap<String,String> _fileimportrequestsettings=new HashMap<String, String>();
	
	private FileInputStream _fileIn=null;
	private void processImportFile(File fileToImport) throws Exception{
		_fileimportrequestsettings.clear();
		for(String fname:"STEPREQUESTID,STEPNAME,STEPDESCRIPTION,STEPTYPENAME,STEPTYPEDESCRIPTION,INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK,REQUESTCREATIONDATE,REQUESTFILEPATH,REQUESTFILENAME,REQUESTHANDLEFLAG,REQUESTLASTHANDLEDATETIME,REQUESTFILEIMPORTSTATUS,REQUESTFILEIMPORTLINECOUNT,REQUESTFILEIMPORTACTIVE,REQUESTFILEIMPORTCONTENTSTATUS,REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION,REQUESTFILEIMPORTFAILURELINECOUNT".split("[,]")){
			_fileimportrequestsettings.put(fname, "");
		}
		
		_fileimportrequestsettings.putAll(this.stepProperties());
		_fileimportrequestsettings.put("REQUESTFILEPATH", fileToImport.getAbsolutePath().substring(0,fileToImport.getAbsolutePath().length()-fileToImport.getName().length()));
		_fileimportrequestsettings.put("REQUESTFILENAME", fileToImport.getName());
		
		Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT ID AS STEPREQUESTID,STEP_ID AS STEPID,STEPNAME,STEPDESCRIPTION,STEPTYPENAME,STEPTYPEDESCRIPTION,INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK,REQUESTCREATIONDATE,REQUESTFILEPATH,REQUESTFILENAME,REQUESTHANDLEFLAG,REQUESTLASTHANDLEDATETIME,REQUESTFILEIMPORTSTATUS,REQUESTFILEIMPORTLINECOUNT,REQUESTFILEIMPORTACTIVE,REQUESTFILEIMPORTCONTENTSTATUS,REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION,REQUESTFILEIMPORTFAILURELINECOUNT FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST WHERE STEP_ID=:STEPID", _fileimportrequestsettings,null);
		
		if(!_fileimportrequestsettings.get("STEPID").equals("")&&_fileimportrequestsettings.get("STEPREQUESTID").equals("")){
			//:REQUESTFILEPATH,:REQUESTFILENAME
			Database.executeDBRequest(null, "AUTOMATEDWORK", "INSERT INTO <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST (STEP_ID,STEPNAME,STEPDESCRIPTION,STEPTYPENAME,STEPTYPEDESCRIPTION,INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK,REQUESTCREATIONDATE,REQUESTFILEPATH,REQUESTFILENAME,REQUESTHANDLEFLAG,REQUESTLASTHANDLEDATETIME,REQUESTFILEIMPORTSTATUS,REQUESTFILEIMPORTLINECOUNT,REQUESTFILEIMPORTACTIVE,REQUESTFILEIMPORTCONTENTSTATUS,REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION,REQUESTFILEIMPORTFAILURELINECOUNT)  SELECT :STEPID,:STEPNAME,:STEPDESCRIPTION,:STEPTYPENAME,:STEPTYPEDESCRIPTION,:INLINESQLCOMMAND,:COMADELIM,:SOURCEPATH,:CURRENTFILEFIELDS,:FILELOOKUPMASK,GETDATE(),:REQUESTFILEPATH,:REQUESTFILENAME,1,GETDATE(),1,0,1,0,NULL,'',0 WHERE (SELECT COUNT(*) FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST WHERE STEP_ID=:STEPID)=0", _fileimportrequestsettings,null);
			Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT ID AS STEPREQUESTID FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST WHERE STEP_ID=:STEPID", this._fileimportrequestsettings,null);
		}
		
		_fileIn=new FileInputStream(fileToImport);
		
		Database.populateDatasetFromFlatFileStream(null, "CSV", _fileIn, null, this.stepProperties().get("COMADELIM").charAt(0),this,"readImportFileData");
		
	}
	
	public void readImportFileData(Integer rowIndex,ArrayList<String> rowData,ArrayList<String> rowColumns){
		if(rowIndex==0){
			
		}
	}
}

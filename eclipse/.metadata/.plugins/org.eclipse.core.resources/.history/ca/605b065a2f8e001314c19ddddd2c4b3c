package baasserver.protocols.markup;

import java.util.ArrayList;
import java.util.HashMap;
import baasserver.protocols.IOProcessorHandle;
import baasserver.protocols.IORequestHandle;
import baasserver.protocols.IOWidgetHandle;

public class IOMarkupProcessorHandle extends IOProcessorHandle {
	
	public IOMarkupProcessorHandle(IOProcessorHandle mainProcessorHandle, Class<?> widgetHandleclass, IORequestHandle requestHandle) throws Exception{
		super(mainProcessorHandle, widgetHandleclass,requestHandle);
	}
	
	
	
	private byte[] _processorResponseBuffer=new byte[8912];
	private int _processorResponseBufferIndex=0;
	private IOWidgetHandle _currentWidget=null;
	private ArrayList<IOWidgetHandle> _currentWidgets=new ArrayList<IOWidgetHandle>();
	private ArrayList<String> _widgetEndTagRefs=new ArrayList<String>();
	private ArrayList<String> _widgetStreamMaskPaths=new ArrayList<String>();
	
	private String _widgetTagRead="";
	private String _widgetTagProperties="";
	
	private int _codeSecCount=0;
	private ArrayList<Byte> _bytesToRespond=new ArrayList<Byte>();
	private ArrayList<Byte> _maskBytesToProcess=new ArrayList<Byte>();
	private boolean _addedStartWidget=false;
	private boolean _nolayoutMaskPaths=false;
		
	@Override
	public void process() throws Exception {
		super.process();
		this._startProcessorPar='<';
		this._endProcessorPar='>';
		
		if(_currentWidget==null){
			_currentWidget=this.widgetHandle();
		}
		String currentWidgetClassName=this._currentWidget.fullWidgetClassName();
		if(currentWidgetClassName.indexOf("@")>-1){
			currentWidgetClassName=currentWidgetClassName.substring(0,currentWidgetClassName.indexOf("@"));
		}
		
		if((_nolayoutMaskPaths=this._currentWidget.widgetLayoutMaskPaths().isEmpty())){
			this.processMaskBytes((this._startProcessorPar+currentWidgetClassName+_endProcessorPar+_startProcessorPar+"/"+currentWidgetClassName+_endProcessorPar).getBytes(),0);
		}
		else{
			_addedStartWidget=true;
			this._widgetStreamMaskPaths=this._currentWidget.widgetLayoutMaskPaths();
			
			this.codingScriptBroker().putCodingReadPhrase(this.codingScriptBroker().codingSpecificIndex("handleWidgetContent"));
			this.codingScriptBroker().putCodingReadContent(this._currentWidget);
			this.codingScriptBroker().putCodingReadContent(new HashMap<String,String>());
			this.codingScriptBroker().putCodingReadPhrase(this.codingScriptBroker().codingSpecificIndex(";"));
			
			this.processInputMaskStream(baasserver.reflection.REFUtils.getResourceAsStream(this._widgetStreamMaskPaths.remove(0)));
		}
		
		this.codingScriptBroker().performCodingRead();
	}

	
	public IOWidgetHandle currentWidget(){
		return this._currentWidget;
	}
	
	private byte _prevmb=0;
	private HashMap<IOWidgetHandle,HashMap<String,String>> _widgetProperties=new HashMap<IOWidgetHandle,HashMap<String,String>>();
	

	

	private void generateWidgetProperties() {
		if(!this._widgetTagProperties.equals("")){
			HashMap<String,String> maskProperties=new HashMap<String,String>();
			
			if(!_widgetTagProperties.equals("")){
				String propName="";
				String propValue="";
				boolean maskPropNameFound=false;
				boolean maskPropValueFound=false;
				
				for(char cp:_widgetTagProperties.toCharArray()){
					if(!maskPropNameFound){
						if(cp=='='){
							maskPropNameFound=true;
							
						}
						else if(cp!=' '){
							propName+=cp;
						}
					}
					else{
						if(!maskPropValueFound&&cp=='\"'){
							maskPropValueFound=true;
						}
						else if(maskPropValueFound&&cp=='\"'){
							maskPropNameFound=false;
							maskPropValueFound=false;
							
							if(!propName.equals("")){
								maskProperties.put(propName.toUpperCase(),(propValue.startsWith(":")?requestHandle().reqParameterString(propValue.substring(1)):propValue));
							}
							
							propName="";
							propValue="";
						}
						else if(maskPropValueFound&&cp!='\"'){
							propValue+=cp;
						}
					}
				}
			}
			this._widgetProperties.put(this._currentWidget,maskProperties);
		}
	}

	private String _currentWidgetStartTag="";
	private ArrayList<String> _invalidWidgetTags=new ArrayList<String>();
	private HashMap<String,Class<?>> _validWidgetTags=new HashMap<String,Class<?>>();
	private ArrayList<byte[]> _unmatchStartTags=new ArrayList<byte[]>();
	private ArrayList<byte[]> _unmatchEndTags=new ArrayList<byte[]>();
	
	private byte[] _currentMaskCodeBytes=new byte[8912];
	private int _currentMaskCodeBytesIndex=0;
}

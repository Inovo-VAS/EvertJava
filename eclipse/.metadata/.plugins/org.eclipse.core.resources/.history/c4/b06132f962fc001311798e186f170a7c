package inovo.monitoring.monitors;

import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Monitor implements Runnable{
	
	private static ExecutorService _monitorsServices=null;
	
	private static ExecutorService _monitorRequestServices=null;
	
	private static ArrayList<Monitor> _monitors=new ArrayList<Monitor>();
	private Monitor _monitorRef=null;
	public Monitor(){
		this._monitorRef=this;
	}
	
	public void requestCompleted(MonitorRequest monitorRequest) {
		if(monitorRequest.stillBusyExecuting()){
			_monitorRequestServices.execute(monitorRequest);
		}
	}
	
	public static Monitor initiateMonitor(Class<?> monitorClass) throws Exception{
		Monitor monitorInit=null;
		initiateMonitor(monitorInit=(Monitor)monitorClass.newInstance());
		return monitorInit;
	}
	
	public static void initiateMonitor(Monitor monitor){
		if(_monitorsServices==null){
			_monitorsServices=Executors.newCachedThreadPool();
		}
		synchronized (_monitors) {
			_monitors.add(monitor);
		}
		_monitorsServices.execute(monitor);
	}
	
	
	public static void killAllMonitors(){
		while(!_monitors.isEmpty()){
			_monitors.remove(0).notify();
			try {
				Thread.sleep(2);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		_monitorsServices.shutdownNow();
	}

	private boolean _shutdownMonitor=false;
	
	@Override
	public void run() {
		if(!this._shutdownMonitor){
			synchronized (_monitorRef) {
				try {
					this._monitorRef.wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
		System.out.println("MONITOR["+this.getClass().getName()+"] stopped");
		synchronized (_monitors) {
			_monitors.remove(this._monitorRef);
		}
	}
	
	public void shutdownMonitor(){
		this._shutdownMonitor=true;
		synchronized (_monitorRef) {
			_monitorRef.notifyAll();
		}
	}
}

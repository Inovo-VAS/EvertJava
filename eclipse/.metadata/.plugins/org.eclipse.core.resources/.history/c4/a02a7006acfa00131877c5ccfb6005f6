package inovo.message.gateway.filters;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;

import inovo.web.InovoHTMLPageWidget;
import inovo.web.InovoWebWidget;

public class StatusFilter extends InovoHTMLPageWidget {

	private StatusFilter _statusFilterRef=null;
	
	public StatusFilter(InovoWebWidget parentWidget, InputStream inStream) {
		super(parentWidget, inStream);
		this._statusFilterRef=this;
	}
	
	private File _filterIOFile=null;
	private FileOutputStream _filterIOFileCollectResponse=null;
	private FileInputStream _filterIOFileResponse=null;
	private OutputStream _filterOutputBuffer=new OutputStream(){
		@Override
		public void write(int b) throws IOException {
			this.write(new byte[]{(byte)b});
		}
		
		public void write(byte[] b) throws IOException {
			this.write(b, 0, b.length);
		}
		
		public void write(byte[] b, int off, int len) throws IOException {
			try {
				_statusFilterRef.respondBytes(b);
			} catch (Exception e) {
			}
		}
	};
	
	@Override
	public void executeContentWidget() throws Exception {
		HashMap<String,ArrayList<String>> filterParamsRead=new HashMap<String, ArrayList<String>>();
		
		//DECLARE @METAFIELDPARAMSTABLE TABLE_TYPE_MESSAGEQUEUE_PARAMS INSERT INTO @METAFIELDPARAMSTABLE VALUES ('LEADSREFERENCENO','1307286'),('LEADSREFERENCENO','1307209'),('LEADSREFERENCENO','1306474') SELECT * FROM MESSAGEQUEUEPRESENCEDAD (@METAFIELDPARAMSTABLE)
		
		if(!this.requestParameters().isEmpty()){
			for(String filterParamsReadkeys:this.requestParameters().keySet()){
				
			}
		}
		
		byte [] bytesFileOut=new byte[8192];
		int bytesFileOutRead=0;
		while((bytesFileOutRead=_filterIOFileResponse.read(bytesFileOut))>-1){
			if(bytesFileOutRead>0){
				byte[] byteFilterFoundOut=new byte[bytesFileOutRead];
				System.arraycopy(bytesFileOut, 0, byteFilterFoundOut, 0, bytesFileOutRead);
				this._filterOutputBuffer.write(byteFilterFoundOut);
				byteFilterFoundOut=null;
			}
		}
	}
	
	private StringBuilder _rowDataString=new StringBuilder();
	
	public void readRowData(Integer rowindex,ArrayList<String> rowData) throws Exception{
		ByteArrayInputStream rowDataInputStream=null;
		
		ArrayList<String> currentRowData=new ArrayList<String>(rowData);
		_rowDataString.setLength(0);
		
		while(!currentRowData.isEmpty()){
			_rowDataString.append(("\""+currentRowData.remove(0).replaceAll("[\"]", "\"\"")+"\""+(!currentRowData.isEmpty()?",":"\r\n")).toCharArray());
		}
		
		byte[] _rowDataBytes=_rowDataString.toString().getBytes();
		if(_rowDataBytes!=null){
			if(_rowDataBytes.length>0){
				
				int _rowDataBytesIndex=0;
				
				if(_filterIOFileCollectResponse!=null){
					inovo.adhoc.AdhocUtils.inputStreamToOutputStream(new InputStream(){
						@Override
						public int read() throws IOException {
							return 0;
						}
						
						@Override
						public int read(byte[] b) throws IOException {
							return this.read(b,0,b.length);
						}
						
						@Override
						public int read(byte[] b, int off, int len)
								throws IOException {
							int totalBytesRead=-1;
								
							return totalBytesRead;
						}
						
					}, _filterIOFileCollectResponse,0);
					_filterIOFileCollectResponse.flush();
				}
			}
		}
	}
	
	@Override
	public void cleanUpWidget() {
		_filterIOFile.delete();
		super.cleanUpWidget();
	}
}

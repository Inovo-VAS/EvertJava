package baasserver.client;

import java.nio.channels.SelectableChannel;
import java.nio.channels.Selector;
import java.util.ArrayList;
import java.util.HashMap;

import baasserver.OldClient;
import baasserver.OldClient.OldClientInputStream;
import baasserver.OldClient.OldClientOutputStream;

public class ClientSocketHandle {
	private OldClient _client=null;
	
	private HashMap<String,String> _responseHeaders=new HashMap<String,String>();
	
	private boolean _populateResponseHeaders=false;
	private boolean _responseHeadersPopulated=false;
	private String _responseHeaderLine="";
	
	public ClientSocketHandle(OldClient client,SelectableChannel channel,boolean populateResponseHeaders,OldClientInputStream clientInputStream,OldClientOutputStream clientOutputStream) throws Exception {
		super(channel);
		this._client=client;
		this._populateResponseHeaders=populateResponseHeaders;
		this._clientInputStream=clientInputStream;
		this._clientOutputStream=clientOutputStream;
	}
	
	private long _requiredContentLength=0;
	private long _retrievedContentLength=0;
	@Override
	public byte[] bytesReadFromChannel(byte[] bytesFromChannel) {
		if(_populateResponseHeaders&&!_responseHeadersPopulated){
			int bytesFromChannelIndex=0; 
			while(bytesFromChannelIndex<bytesFromChannel.length){
				char rhc=(char)bytesFromChannel[bytesFromChannelIndex++];
				if(rhc=='\r') continue;
				if(rhc=='\n'){
					if(!(_responseHeadersPopulated=_responseHeaderLine.equals(""))){
						if(_responseHeaderLine.indexOf(":")>0){
							this._responseHeaders.put(_responseHeaderLine.toUpperCase().substring(0,_responseHeaderLine.indexOf(":")).trim(), _responseHeaderLine.substring(_responseHeaderLine.indexOf(":")+1).trim());
						}
						else{
							_responseHeaderLine="";
						}
					}
					else{
						_retrievedContentLength=0;
						if(this._responseHeaders.containsKey("CONTENT-LENGTH")){
							_requiredContentLength=Long.parseLong(this._responseHeaders.get("CONTENT-LENGTH"));
						}
						
						if(bytesFromChannelIndex<bytesFromChannel.length){
							_retrievedContentLength=bytesFromChannel.length-bytesFromChannelIndex;
							byte[] remainingBytesFromChannel=new byte[(int)_retrievedContentLength];
							System.arraycopy(bytesFromChannel, bytesFromChannelIndex, remainingBytesFromChannel,0, remainingBytesFromChannel.length);
							return remainingBytesFromChannel;
						}
					}
					this._responseHeaderLine="";
					continue;
				}
				this._responseHeaderLine+=rhc;
			}
			return null;
		}
		_retrievedContentLength=(this._populateResponseHeaders?_retrievedContentLength+bytesFromChannel.length:_retrievedContentLength);
		return super.bytesReadFromChannel(bytesFromChannel);
	}
	
	public HashMap<String,String> responseHeaders(){
		return this._responseHeaders;
	}
	
	public void clearHeaders(){
		this._responseHeaders.clear();
	}

	private ClientInputStream _clientInputStream=null;
	private ClientOutputStream _clientOutputStream=null;
	
	private boolean _connected=false;
	
	public boolean connected(){
		return this._connected;
	}
	
	private Object _clientSocketHandleLock=new Object();
	private boolean _disconnected=false;
	
	public boolean disconnect(){
		this._connected=false;
		synchronized (_clientSocketHandleLock) {
			_clientSocketHandleLock.notify();
		}
		while(!this._disconnected){
			synchronized (_clientSocketHandleLock) {
				try {
					_clientSocketHandleLock.wait(5);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
		return this._disconnected;
	}

}

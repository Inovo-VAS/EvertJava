package baasserver.protocols;

import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;

import baasserver.brokers.CodingScriptBroker;
import baasserver.protocols.markup.IOMarkupProcessorHandle;

public class IOProcessorHandle implements Runnable{
	
	private IOWidgetHandle _widgetHandle=null;
	private IORequestHandle _requestHandle=null;
	private IOProcessorHandle _mainProcessorHandle=null;
	private CodingScriptBroker _codingScriptBroker=null;
	
	private Exception _e=null;
	
	public IOProcessorHandle(IOProcessorHandle mainProcessorHandle, Class<?> widgetHandleclass, IORequestHandle requestHandle) throws Exception{
		this._mainProcessorHandle=(mainProcessorHandle==null?this:mainProcessorHandle);
		this._requestHandle=requestHandle;
		this._widgetHandle=IOWidgetHandle.newIOWidgetHandle(widgetHandleclass,null, this._mainProcessorHandle);
	}
	
	public void process() throws Exception{
		if(_mainProcessorHandle==this){
			for(String reqParamName:this.requestHandle().reqParameterNames()){
				if(reqParamName.toUpperCase().startsWith("PROPERTY:")){
					this._widgetHandle.setProperty(reqParamName.substring("PROPERTY:".length()),this.requestHandle().reqParameterString(reqParamName));
				}
			}
		}
		
		this._codingScriptBroker=new CodingScriptBroker(this);
		//Method inputStreamMaskPath=baasserver.reflection.REFUtils.findMethod("inputStreamMaskPath",this.widgetHandle().getClass(),new Class<?>[0]);
		//if(inputStreamMaskPath!=null){
		//	processInputMaskStream(IOMarkupProcessorHandle.class.getResourceAsStream((String) inputStreamMaskPath.invoke(this.widgetHandle(),(Object[])null)));
		//}
	}
	
	public void writeBytes(byte[]bytesToWrite){
		this.requestHandle().writeBytes(bytesToWrite);
	}
	
	public CodingScriptBroker codingScriptBroker(){
		return this._codingScriptBroker;
	}
	
	public void processInputMaskStream(InputStream inputMaskStream) throws Exception{
		if(inputMaskStream==null) return;
		int maskBufferSize=0;
		byte[] maskBufferRead=new byte[8912];
		while((maskBufferSize=inputMaskStream.read(maskBufferRead,0,maskBufferRead.length))>-1){
			if(maskBufferSize>0){
				byte [] actualMaskBuffer=new byte[maskBufferSize];
				System.arraycopy(maskBufferRead, 0, actualMaskBuffer, 0, maskBufferSize);
				this.processMaskBytes(actualMaskBuffer,0);					
			}
		}
	}
	
	public IOWidgetHandle widgetHandle(){
		return this._widgetHandle;
	}
	
	public IORequestHandle requestHandle(){
		return this._requestHandle;
	}
	
	@Override
	public void run() {
		try{
			this.process();
		}
		catch(Exception e){
			this._e=e;
			debug("ERROR:"+e.getMessage());
		}
	}
	
	public Exception exception(){
		return this._e;
	}
	
	public void loadMaskCodeByte(byte br) throws Exception{
		this.loadMaskCodeByte(br, true);
	}
	
	public void loadMaskCodeByte(byte br,boolean debug) throws Exception{
		char cc=(char)br;
		this.codingScriptBroker().loadMaskCodeByte(br, debug);
	}
	
	public void cleanupProcessor(){
		
	}
	
	public void processMaskBytes(byte[] maskContentBuffer, int maskContentBufferCount) throws Exception{
	}
	
	public void debug(String debugMessage){
		baasserver.io.Logger.debug(baasserver.reflection.REFUtils.formatClassName(this.getClass().getName())+":"+debugMessage);
	}

	
}

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.URL;
import java.security.CodeSource;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import baasserver.db.protocols.DBRequestHandle;
import baasserver.db.server.DBServer;
import baasserver.db.system.DBSystem;
import baasserver.encdec.Base64;
import baasserver.io.nio.AdvancedClient;
import baasserver.protocols.markup.IOMarkupRequestHandle;
import baasserver.remoting.RemoteClient;
import baasserver.remoting.RemoteRequestHandle;

public class BaasServerMain {

	/**
	 * @param args
	 */
	
	public static void main(String[] args) {	
		String rootpath=BaasServerMain.class.getProtectionDomain().getCodeSource().getLocation().getPath().substring(1);
		if(rootpath.indexOf(".jar")>-1){
			rootpath=new File(rootpath).getParent().replaceAll("[\\\\]", "/");
			rootpath=(rootpath.endsWith("/")?rootpath:rootpath+"/");
		}
		baasserver.io.Logger.setLogFilePath(rootpath+"log.log");
		
		baasserver.io.Logger.debug(Thread.currentThread().getContextClassLoader().getResource("").getPath().substring(1)+"log.log");
		baasserver.io.Logger.debug("EnvironmentStarted");
		
		CodeSource codesource= BaasServerMain.class.getProtectionDomain().getCodeSource();
		
		if(codesource!=null){
			URL jarurl=codesource.getLocation();
			try {
				ZipInputStream zip=new ZipInputStream(jarurl.openStream());
				ZipEntry zipentry=null;
				while((zipentry=zip.getNextEntry())!=null){
					baasserver.reflection.REFUtils.loadRootResourceEntryPath(zipentry.getName());
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		try {
			baasserver.reflection.REFUtils.loadJarPackagesFromPath(Thread.currentThread().getContextClassLoader().getResource("").getPath());
		} catch (Exception e) {
			baasserver.io.Logger.debug(e.getMessage());
		}
		
		try {
			DBSystem.registerWebSystem("baasserver.db.system").registerDBManager("BAASSYSTEM", "dbtype=postgresql|dbhost=127.0.0.1:5432|dbinstance=|dbname=BAASSYSTEM|dbuser=BAAS|dbpw=nan6inga|dbschema=SYSTEMS".split("[|]")).nextConnection();
		} catch (Exception e) {
			baasserver.io.Logger.debug("error:baasserver.db.system:"+e.getMessage());
		}
		
		try {
			DBSystem.registerWebSystem("baasserver.db.system").registerDBManager("NEMUS", "dbtype=sqlserver|dbhost=NEMUS|dbinstance=|dbname=SQLPR1|dbuser=sa|dbpw=presence|dbschema=dbo".split("[|]")).nextConnection();
		} catch (Exception e) {
			baasserver.io.Logger.debug("error:baasserver.db.system:"+e.getMessage());
		}
		
		try {
			
			baasserver.io.nio.AdvancedServer.initiateServer(baasserver.db.server.DBServer.class, 3333);
			
			new Thread(new baasserver.io.nio.netty.Server(2222)).start();
			
			//((RemoteClient)baasserver.remoting.Client.sendRequest(RemoteClient.class, "127.0.0.1", 3333, "/baasserver/db/web/system/select.sql?PROPERTY:DBURL=//baasserver.db.system/BAASSYSTEM&PROPERTY:TABLE=SYSTEM",null)).remoteObject();
//			RemoteRequestHandle.sendRequest(null, "/baasserver/db/web/system/select.sql?PROPERTY:DBURL=//baasserver.db.system/BAASSYSTEM&PROPERTY:TABLE=SYSTEM", null).remoteObject();
			//baasserver.io.nio.AdvancedClient advclient=new AdvancedClient("127.0.0.1",3333);
			//advclient.clientWriteOutputStream().writeln("GET /baasserver/db/web/system/select.sql HTTP/1.1");
			//advclient.clientWriteOutputStream().writeln("CONNECTION : Close");
			//advclient.clientWriteOutputStream().flush();
			
			//ByteArrayOutputStream bytesout=new ByteArrayOutputStream();
			
			//baasserver.io.IOUtils.inputStreamToOutputStream(advclient.clientReadInputStream(), bytesout);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

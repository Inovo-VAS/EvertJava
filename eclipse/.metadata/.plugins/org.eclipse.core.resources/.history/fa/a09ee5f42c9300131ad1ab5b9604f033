package baasserver;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.channels.SelectableChannel;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.nio.channels.spi.SelectorProvider;
import java.util.ArrayList;

import baasserver.io.handler.InputOutputHandler;

public class Client {
	
	public class ClientInputStream extends InputStream{
		
		private Client _client=null;
		private ClientInputStream(Client client){
			this._client=client;
		}
		
		@Override
		public int read() throws IOException {
			return 0;
		}
		
		@Override
		public int read(byte[] b) throws IOException {
			return this.read(b, 0, b.length);
		}
		
		@Override
		public int read(byte[] b, int off, int len) throws IOException {
			return 0;
		}
	}
	
	public class ClientOutputStream extends OutputStream{

		private Client _client=null;
		private ClientOutputStream(Client client){
			this._client=client;
		}
		
		private ArrayList<byte[]> _bytesToSend=new ArrayList<byte[]>();
		
		@Override
		public void write(int arg0) throws IOException {
			
		}
		
		@Override
		public void write(byte[] b) throws IOException {
			this.write(b, 0, b.length);
		}
		
		@Override
		public void write(byte[] b, int off, int len) throws IOException {
			
		}
	}
	
	public class  ClientSocketHandle extends InputOutputHandler{

		private Client _client=null;
		
		public ClientSocketHandle(Client client,SelectableChannel channel) throws Exception {
			super(channel);
			this._client=client;
		}
		
		@Override
		public void initiateSelectorChannel(Selector selector,
				SelectableChannel channel) throws Exception{
			this.registerReadWriteAcceptConnect(selector, channel, "CONNECT");
		}
		
		private boolean _connected=false;
		
		@Override
		public void run() {
			
			try {
				while(!_connected){
					this.connectChannel();
					_connected=true;
				}
			} catch (Exception e) {
				_connected=false;
			}
			while(_connected){
				
			}
		}
	}
	
	private ClientSocketHandle _clientSocktHandle=null;
	private SocketChannel _channel=null;
	
	public Client(String host,int port) throws Exception{
		this(new InetSocketAddress(host, port));
	}
	
	private ClientInputStream _clientInputStream=null;
	private ClientOutputStream _clientOutputStream=null;
	
	public void reConnect() throws Exception{
		this._channel.connect(this._inetAddress);
	}
	
	private InetSocketAddress _inetAddress=null;
	public Client(InetSocketAddress inetaddress) throws Exception{
		this._channel=SelectorProvider.provider().openSocketChannel();
		this._channel.configureBlocking(false);
		this._inetAddress=inetaddress;
		this._clientSocktHandle=new ClientSocketHandle(this, this._channel);
		
		this.reConnect();
		
		this._clientInputStream=new ClientInputStream(this);
		this._clientOutputStream=new ClientOutputStream(this);
		
		new Thread(this._clientSocktHandle).start();
		
	}
}

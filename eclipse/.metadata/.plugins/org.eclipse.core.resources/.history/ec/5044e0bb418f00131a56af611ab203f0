package baasserver;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.nio.channels.spi.SelectorProvider;
import java.util.ArrayList;
import java.util.Iterator;

import baasserver.protocols.IORequestHandle;
import baasserver.protocols.IOutput;

public class InputOutputHandle implements Runnable,IOutput {
	
	private SocketChannel _socketChannel=null;
	private Selector _selHandle=null;
	private IORequestHandle _requestHandle=null;
	private InputOutputHandleOwner _inputOutputHandleOwner=null;
	
	public InputOutputHandle(InputOutputHandleOwner inputOutputHandleOwner,SocketChannel channel) throws IOException{
		this._socketChannel=channel;
		this._inputOutputHandleOwner=inputOutputHandleOwner;
		this._socketChannel.configureBlocking(false);
		this._selHandle=SelectorProvider.provider().openSelector();
	}

	@Override
	public void writeBytes(byte[] bytesToWrite) {
	}

	@Override
	public void writeBytesAppendTop(byte[] bytesToWrite) {
	}

	private boolean _canWriteBytes=false;
	@Override
	public void canWriteBytes() {
		this._canWriteBytes=true;
	}

	private boolean _done=false;
	@Override
	public void done() {
		this._done=true;
	}

	private boolean _stillNeedToRead=false;
	@Override
	public void canReadNextBytes() {
		_stillNeedToRead=true;
	}

	private boolean _doneWriting=false;
	@Override
	public void doneWriting() {
		this._done=this._requestHandle.reqDone();
		this._doneWriting=_done;
		try {
			this.registerRead();
		} catch (ClosedChannelException e) {
		}
	}
	
	this._bytesArrayToWrite.

	@Override
	public void run() {
		try{
			this._requestHandle=this._inputOutputHandleOwner.nextIORequestHandle(this);
			this._bytesArrayToWrite.addAll(this._output.readBytesWritten());
			if(!this._bytesArrayToWrite.isEmpty()) registerWrite();
			while(!_done){
				try {
					
					while(this._selHandle.select()>0){
						Iterator<SelectionKey> selKeys=this._selHandle.selectedKeys().iterator();
						while(selKeys.hasNext()){
							SelectionKey selKeyRW=selKeys.next();
							if(selKeyRW.isValid()){
								if(selKeyRW.isReadable()){
									this.readFromKey(selKeyRW);
									if(this._stillNeedToRead){
										this._stillNeedToRead=false;
										this.registerRead();
									}
									if(!this._bytesArrayToWrite.isEmpty()){
										this.registerWrite();
									}
								}
								else if(selKeyRW.isWritable()){
									this.writeToKey(selKeyRW);
								}
								else{
									selKeyRW.cancel();
								}
							}
							selKeys.remove();
						}
						if(this._doneWriting){
							break;
						}
						if(_done){
							break;
						}
					}
				} catch (IOException e) {
					this._done=true;
				}
				synchronized (this) {
					this.wait(2);
				}
			}
		} catch (Exception e1) {
			e1.printStackTrace();
		}	
		this._requestHandle.cleanupRequest();
		try {
			this._socketChannel.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			this._selHandle.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(this._requestHandle.canShutdownAll()){
			this.shutdownAll();
			
		}
		else if(this._requestHandle.canShutdownRequestEnvironment()){
			this.shutdownRequestEnvironment();
		}
		this._requestHandle=null;
	}

	public void shutdownRequestEnvironment() {
	}

	public void shutdownAll() {
	}
	
	private ArrayList<byte[]> _bytesReadArray=new ArrayList<byte[]>();
	
	private void readFromKey(SelectionKey selKeyRW) throws Exception {
		int byteBufferReadSize=0;
		ByteBuffer byteBuffer=ByteBuffer.allocate(8912);
		while((byteBufferReadSize=this._socketChannel.read(byteBuffer))>-1){
			if(byteBufferReadSize==0){
				break;
			}
			byteBuffer.flip();
			int remainingSize=0;
			while((remainingSize=byteBuffer.remaining())>0){
				byte[] bytesToRead=new byte[remainingSize];
				byteBuffer.get(bytesToRead,0,bytesToRead.length);
				_bytesReadArray.add(bytesToRead);
			}
		}
		if(!_bytesReadArray.isEmpty()){
			this.bytesArrayRead(_bytesReadArray);
		}
		else if(this._bytesReadArray.isEmpty()&&byteBufferReadSize==-1){
			this.done();
		}
	}

	public void bytesArrayRead(ArrayList<byte[]> readBytesArray) throws Exception {
		this._requestHandle.readBytesArrays(readBytesArray);
	}

	private void registerRead() throws ClosedChannelException {
		this._socketChannel.register(_selHandle, SelectionKey.OP_READ);		
	}

	private ArrayList<byte[]> _bytesArrayToWrite=new ArrayList<byte[]>();
	
	public ArrayList<byte[]> bytesArrayToWrite(){
		return this._bytesArrayToWrite;
	}
	
	private ByteBuffer _byteBufferWR=null;
	private void writeToKey(SelectionKey selKeyRW) throws IOException {
		if(_byteBufferWR==null){
			if(!_bytesArrayToWrite.isEmpty()){
				byte[]bytesToFlushToReader=_bytesArrayToWrite.remove(0);
				_byteBufferWR=ByteBuffer.wrap(bytesToFlushToReader);
				this.writeToKey(selKeyRW);
			}
		}
		else{
			_socketChannel.write(_byteBufferWR);
	        if (_byteBufferWR.remaining() > 0) {
	        	this.registerWrite();
	        }
	        else{
	        	if(!_bytesArrayToWrite.isEmpty()){
	        		_byteBufferWR.clear();
	        		_byteBufferWR=null;
	        		this.registerWrite();
	        	}
	        	else{
	        		this.doneWriting();
	        	}
	        }
		}		
	}
	
	protected void registerWrite() throws ClosedChannelException {
		this._socketChannel.register(_selHandle, SelectionKey.OP_WRITE);		
	}
}

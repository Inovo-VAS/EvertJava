package baasserver.web.system.datagrid;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;

import baasserver.json.simple.JSONArray;
import baasserver.json.simple.JSONObject;
import baasserver.protocols.IOProcessorHandle;
import baasserver.protocols.IORequestHandle;
import baasserver.protocols.IOWidgetHandle;

public class DataGrid extends IOWidgetHandle {

	public DataGrid(IOWidgetHandle parentWidget, IOProcessorHandle processor)
			throws Exception {
		super(parentWidget, processor);
		this._gridDataSet.put((Integer)(-1), new ArrayList<Object>());
		
		this._gridDataSet.put((Integer)(0), new ArrayList<Object>());
	}
	
	private HashMap<Integer,Integer> _gridColumnSizes=new HashMap<Integer,Integer>();
	
	public void setGridColumNames(Object[]columNames){
		for(Object colName:columNames){
			this._gridDataSet.get((Integer)(0)).add(((String)colName).toUpperCase());
		}
	}
	
	private void setColumnWidth(Integer colIndex,Integer colWidth){
		Integer currentColWidth=this._gridColumnSizes.get(colIndex);
		if(currentColWidth==null) currentColWidth=0;
		if(colWidth>currentColWidth){
			this._gridColumnSizes.put(colIndex, colWidth);
		}
	}
	
	public void addGridRowData(Object[]rowData){
		ArrayList<Object> rowDataToAdd=new ArrayList<Object>();
		for(Object data:rowData){
			rowDataToAdd.add(data);
		}
		
		if(rowDataToAdd.size()==this._gridDataSet.get((Integer)0).size()){
			this._gridDataSet.put((Integer)this._gridDataSet.size(), rowDataToAdd);
		}
	}
	
	private TreeMap<Integer,ArrayList<Object>> _gridDataSet=new TreeMap<Integer,ArrayList<Object>>();
	
	public void dataSet(TreeMap<Integer,ArrayList<Object>> datasetToLoad){
		this._gridDataSet.putAll(datasetToLoad);
	}

	public boolean isProcessingHeaders() {
		return false;
	}
	
	public String gridColumnTitles(){
		JSONArray gridColumnTitles=new JSONArray();
		ArrayList<Object> gridColumnDisplayNames=this.gridColumnDisplayNames();
		for(Object gridColDispName:gridColumnDisplayNames){
			String gridDispName=(String)gridColDispName;
			gridColumnTitles.add(gridDispName.toUpperCase());
		}
		return gridColumnTitles.toJSONString();
	}
	
	public String gridColumnsModel(){
		JSONArray gridColumnsModel=new JSONArray();
		Integer colIndex=0;
		for(Object gridColName:this._gridDataSet.get((Integer)0)){
			String gridColNameModel=((String)gridColName).replaceAll(" ", "_");
			//{name:'id',index:'id', width:60, sorttype:"int"},
			JSONObject gridColModel=new JSONObject();
			gridColModel.put("name", gridColNameModel.toUpperCase());
			gridColModel.put("index", gridColNameModel.toUpperCase());
			gridColModel.put("width", gridColNameModel.toUpperCase().length()*10);
			gridColumnsModel.add(gridColModel);
			colIndex++;
		}
		
		return gridColumnsModel.toJSONString();
	}
	
	public String gridDataModel(){
		JSONArray gridDataModel=new JSONArray();
		ArrayList<Object> columnNames=new ArrayList<Object>();
		for(Object gridColName:this._gridDataSet.get((Integer)0)){
			columnNames.add(((String)gridColName).replaceAll(" ", "_"));
		}
		
		int rowColIndex=0;
		
		for(Integer rowKey:this._gridDataSet.keySet()){
			if(rowKey<=0) continue;
			rowColIndex=0;
			ArrayList<Object> rowData=this._gridDataSet.get(rowKey);
			JSONObject jsonRowData=new JSONObject();
			while(rowColIndex<rowData.size()){
				jsonRowData.put(columnNames.get(rowColIndex), rowData.get(rowColIndex));
				rowColIndex++;
			}
			gridDataModel.add(jsonRowData);
		}
		
		return gridDataModel.toJSONString();
	}
	
	private ArrayList<Object> gridColumnDisplayNames() {
		return this._gridDataSet.get((Integer)0);
	}

	public TreeMap<Integer,ArrayList<Object>> griddataSet(){
		return this._gridDataSet;
	}
}

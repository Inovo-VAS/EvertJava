package inovo.automated.work.steps;

import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import inovo.automated.work.AutomatedWorker;
import inovo.automated.work.AutomatedWorkerStep;
import inovo.db.Database;

public class ExportFileStep extends AutomatedWorkerStep {

	public ExportFileStep(AutomatedWorker automatedWorker,
			HashMap<String, String> stepProperties) {
		super(automatedWorker, stepProperties);
	}

	private File _fileDir=null;
	
	private ArrayList<String> _filemaskSections=new ArrayList<String>();
	private ArrayList<String> _currentFileFieldNames=new ArrayList<String>();	
	
	@Override
	public void performAutomationStep() {
		this.stepProperties().put("INLINESQLCOMMAND", "");
		this.stepProperties().put("COMADELIM", "");
		this.stepProperties().put("DESTINATIONPATH", "");
		this.stepProperties().put("CURRENTFILEFIELDS", "");
		this.stepProperties().put("FILEEXPORTMASK", "");
		
		try {
			Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT INLINESQLCOMMAND,COMADELIM,DESTINATIONPATH,CURRENTFILEFIELDS,FILEEXPORTMASK FROM <DBUSER>.AUTOMATED_STEP_TYPE_EXPORTFILE WHERE STEP_ID=:STEPID", this.stepProperties(), null);
			
		} catch (Exception e) {
		}
		this._currentFileFieldNames.clear();
		String[]currentFileFields=this.stepProperties().get("CURRENTFILEFIELDS").split("["+this.stepProperties().get("COMADELIM")+"]");
		if(currentFileFields!=null){
			if(currentFileFields.length>0){
				for(String currentfield:currentFileFields){
					if(this._currentFileFieldNames.indexOf(currentfield.toUpperCase())==-1) this._currentFileFieldNames.add(currentfield.toUpperCase());
				}
			}
		}
		
		_fileDir=new File(this.stepProperties().get("SOURCEPATH"));
		if(_fileDir.isDirectory()){
			File[]	filesFound=_fileDir.listFiles(new FilenameFilter() {
				
				@Override
				public boolean accept(File file, String name) {
					_filemaskSections.clear();
					name=name.toLowerCase();
					String[]fileMask=stepProperties().get("FILELOOKUPMASK").toLowerCase().split("[*]");
					for(int maskindex=0;maskindex<fileMask.length;maskindex++){
						String fsec=fileMask[maskindex];
						if(maskindex==0){
							if(name.startsWith(fsec)){
								name=name.substring(fsec.length());
							}
						}
						else if(maskindex==fileMask.length-1){
							if(!name.endsWith(fsec)){
								name="";
							}
						}
						else{
							if(name.indexOf(fsec)>-1){
								name=name.substring(name.indexOf(fsec)+fsec.length());
							}
							else{
								name="";
								break;
							}
						}
					}
					
					return !name.equals("");
				}
			});
			
			if(filesFound!=null){
				if(filesFound.length>0){
					try {
						while(!filesFound[0].renameTo(filesFound[0])){
							Thread.sleep(2000);
						}
						this.processImportFile(filesFound[0]);
						System.out.println(new File(filesFound[0].getAbsolutePath().substring(0,filesFound[0].getAbsolutePath().length()-filesFound[0].getName().length())+"handled/PROCESSED"+new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())+filesFound[0].getName()));
						filesFound[0].renameTo(new File(filesFound[0].getAbsolutePath().substring(0,filesFound[0].getAbsolutePath().length()-filesFound[0].getName().length())+"handled/PROCESSED"+new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())+filesFound[0].getName()));
					} catch (Exception e) {
						e.printStackTrace();
						filesFound[0].renameTo(new File(filesFound[0].getAbsolutePath().substring(0,filesFound[0].getAbsolutePath().length()-filesFound[0].getName().length())+"handled/FAILED"+filesFound[0].getName()));
					}
					
					if(_fileIn!=null){
						try {
							_fileIn.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
						_fileIn=null;
						
					}
					
					filesFound[0].delete();
				}
			}
		}
	}

	private HashMap<String,String> _fileimportrequestsettings=new HashMap<String, String>();
	
	private FileInputStream _fileIn=null;
	
	
	private long _fileImportLineCount=0;
	private long _fileImportFailureLineCount=0;
	
	private void processImportFile(File fileToImport) throws Exception{
		_fileimportrequestsettings.clear();
		for(String fname:"STEPREQUESTID,STEPNAME,STEPDESCRIPTION,STEPTYPENAME,STEPTYPEDESCRIPTION,INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK,REQUESTCREATIONDATE,REQUESTFILEPATH,REQUESTFILENAME,REQUESTHANDLEFLAG,REQUESTLASTHANDLEDATETIME,REQUESTFILEIMPORTSTATUS,REQUESTFILEIMPORTLINECOUNT,REQUESTFILEIMPORTACTIVE,REQUESTFILEIMPORTCONTENTSTATUS,REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION,REQUESTFILEIMPORTFAILURELINECOUNT".split("[,]")){
			_fileimportrequestsettings.put(fname, "");
		}
		
		_fileimportrequestsettings.putAll(this.stepProperties());
		_fileimportrequestsettings.put("REQUESTFILEPATH", fileToImport.getAbsolutePath().substring(0,fileToImport.getAbsolutePath().length()-fileToImport.getName().length()));
		_fileimportrequestsettings.put("REQUESTFILENAME", fileToImport.getName());
		
		Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT ID AS STEPREQUESTID,STEP_ID AS STEPID,STEPNAME,STEPDESCRIPTION,STEPTYPENAME,STEPTYPEDESCRIPTION,INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK,REQUESTCREATIONDATE,REQUESTFILEPATH,REQUESTFILENAME,REQUESTHANDLEFLAG,REQUESTLASTHANDLEDATETIME,REQUESTFILEIMPORTSTATUS,REQUESTFILEIMPORTLINECOUNT,REQUESTFILEIMPORTACTIVE,REQUESTFILEIMPORTCONTENTSTATUS,REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION,REQUESTFILEIMPORTFAILURELINECOUNT FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST WHERE STEP_ID=:STEPID AND REQUESTFILEIMPORTACTIVE=1", _fileimportrequestsettings,null);
		
		if(!_fileimportrequestsettings.get("STEPID").equals("")&&_fileimportrequestsettings.get("STEPREQUESTID").equals("")){
			//:REQUESTFILEPATH,:REQUESTFILENAME
			Database.executeDBRequest(null, "AUTOMATEDWORK", "INSERT INTO <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST (STEP_ID,STEPNAME,STEPDESCRIPTION,STEPTYPENAME,STEPTYPEDESCRIPTION,INLINESQLCOMMAND,COMADELIM,SOURCEPATH,CURRENTFILEFIELDS,FILELOOKUPMASK,REQUESTCREATIONDATE,REQUESTFILEPATH,REQUESTFILENAME,REQUESTHANDLEFLAG,REQUESTLASTHANDLEDATETIME,REQUESTFILEIMPORTSTATUS,REQUESTFILEIMPORTLINECOUNT,REQUESTFILEIMPORTACTIVE,REQUESTFILEIMPORTCONTENTSTATUS,REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION,REQUESTFILEIMPORTFAILURELINECOUNT)  SELECT :STEPID,:STEPNAME,:STEPDESCRIPTION,:STEPTYPENAME,:STEPTYPEDESCRIPTION,:INLINESQLCOMMAND,:COMADELIM,:SOURCEPATH,:CURRENTFILEFIELDS,:FILELOOKUPMASK,GETDATE(),:REQUESTFILEPATH,:REQUESTFILENAME,1,GETDATE(),1,0,1,0,NULL,'',0", _fileimportrequestsettings,null);
			Database.executeDBRequest(null, "AUTOMATEDWORK", "SELECT MAX(ID) AS STEPREQUESTID FROM <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST WHERE STEP_ID=:STEPID", this._fileimportrequestsettings,null);
		}
		
		_fileIn=new FileInputStream(fileToImport);
		_fileImportLineCount=0;
		_fileImportFailureLineCount=0;
		Database.populateDatasetFromFlatFileStream(null, "CSV", _fileIn, null, this.stepProperties().get("COMADELIM").charAt(0),this,"readImportFileData");
		try {
			Database.executeDBRequest(null, "AUTOMATEDWORK", "UPDATE <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST SET REQUESTHANDLEFLAG=3,REQUESTLASTHANDLEDATETIME=GETDATE(),REQUESTFILEIMPORTSTATUS=0,REQUESTFILEIMPORTLINECOUNT=(SELECT COUNT(*) FROM <DBUSER>.AUTOMATION_STEP_TYPE_IMPORTFILE_CONTENT WHERE REQUESTID=:STEPREQUESTID),REQUESTFILEIMPORTCONTENTSTATUS=0,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION='',REQUESTFILEIMPORTFAILURELINECOUNT=(SELECT COUNT(*) FROM <DBUSER>.AUTOMATION_STEP_TYPE_IMPORTFILE_CONTENT WHERE REQUESTID=:STEPREQUESTID AND EXPORTSTATUS=4),REQUESTFILEIMPORTCONTENTCOMPLETIONDATETIME=GETDATE(),REQUESTFILEIMPORTACTIVE=0 WHERE ID=:STEPREQUESTID", this._fileimportrequestsettings, null);
		} catch (Exception e) {
		}
		
	}
	
	private ArrayList<String> _fileRecordColumns=new ArrayList<String>();
	private ArrayList<String> _fileRecordData=new ArrayList<String>();
	private StringBuilder _sqlFileContentImportCommand=new StringBuilder();
	private int _colIndex=0;
	private HashMap<String,String> _fileContentParams=new HashMap<String, String>();
	
	public void readImportFileData(Integer rowIndex,ArrayList<String> rowData,ArrayList<String> rowColumns){
		_fileImportLineCount++;
		if(rowIndex==0){
			_fileRecordColumns.clear();
			_fileRecordColumns.addAll(rowColumns);
		}
		_fileRecordData.clear();
		_fileRecordData.addAll(rowData);
		
		_fileContentParams.clear();
		
		this._sqlFileContentImportCommand.setLength(0);
		this._sqlFileContentImportCommand.append("INSERT INTO <DBUSER>.AUTOMATION_STEP_TYPE_IMPORTFILE_CONTENT (");
		
		this._sqlFileContentImportCommand.append("REQUESTID,");
		_fileContentParams.put("REQUESTID", this._fileimportrequestsettings.get("STEPREQUESTID"));
		
		this._sqlFileContentImportCommand.append("IMPORTDATETIME,");
		this._sqlFileContentImportCommand.append("ROWTYPE,");
		_fileContentParams.put("ROWTYPE", rowIndex==0?"COLUMNS":"DATA");
		
		this._colIndex=0;
		while(this._colIndex<rowColumns.size()){
			this._sqlFileContentImportCommand.append("FIELD"+String.valueOf((this._colIndex+1))+",");
			this._colIndex++;
		}
		
		this._sqlFileContentImportCommand.append("EXPORTSTATUS,");
		this._sqlFileContentImportCommand.append("EXPORTSTATUSDESCRIPTION) ");
		
		this._sqlFileContentImportCommand.append("SELECT ");
		this._sqlFileContentImportCommand.append(":REQUESTID,");
		this._sqlFileContentImportCommand.append("GETDATE(),");
		this._sqlFileContentImportCommand.append(":ROWTYPE,");
		
		this._colIndex=0;
		while(this._colIndex<rowColumns.size()){
			this._sqlFileContentImportCommand.append(":FIELD"+String.valueOf((this._colIndex+1))+",");
			_fileContentParams.put("FIELD"+String.valueOf((this._colIndex+1)),rowData.get(_colIndex));
			this._colIndex++;
		}
		
		this._sqlFileContentImportCommand.append(":EXPORTSTATUS,");
		this._sqlFileContentImportCommand.append(":EXPORTSTATUSDESCRIPTION ");
		
		if(rowIndex==0){
			_fileContentParams.put("EXPORTSTATUS", "1");
			_fileContentParams.put("EXPORTSTATUSDESCRIPTION", "");
		}
		else{
			if(_fileimportrequestsettings.get("INLINESQLCOMMAND").equals("")){
				_fileContentParams.put("EXPORTSTATUS", "1");
				_fileContentParams.put("EXPORTSTATUSDESCRIPTION", "");
			}
			else{
				_fileimportrequestsettings.put("INLINESQLCOMMAND",this.formatInlineSQLCommand(_fileimportrequestsettings.get("INLINESQLCOMMAND")));
				try {
					Database.executeDBRequest(null, "AUTOMATEDWORK", _fileimportrequestsettings.get("INLINESQLCOMMAND"), _fileContentParams, null);
					_fileContentParams.put("EXPORTSTATUS", "2");
					_fileContentParams.put("EXPORTSTATUSDESCRIPTION", "");
				} catch (Exception e) {
					_fileImportFailureLineCount++;
					_fileContentParams.put("EXPORTSTATUS", "4");
					_fileContentParams.put("EXPORTSTATUSDESCRIPTION", "ERROR:INLINESQLCOMMAND:"+e.getMessage());
				}
			}
		}
		try {
			Database.executeDBRequest(null, "AUTOMATEDWORK", this._sqlFileContentImportCommand.substring(0,this._sqlFileContentImportCommand.length()), this._fileContentParams, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(_fileImportLineCount % 1000==0){
			try {
				Database.executeDBRequest(null, "AUTOMATEDWORK", "UPDATE <DBUSER>.AUTOMATED_STEP_TYPE_IMPORTFILE_REQUEST SET REQUESTHANDLEFLAG=2,REQUESTLASTHANDLEDATETIME=GETDATE(),REQUESTFILEIMPORTSTATUS=1,REQUESTFILEIMPORTLINECOUNT="+String.valueOf(_fileImportLineCount)+",REQUESTFILEIMPORTCONTENTSTATUS=0,REQUESTFILEIMPORTCONTENTSTATUSDESCRIPTION='',REQUESTFILEIMPORTFAILURELINECOUNT="+String.valueOf(_fileImportFailureLineCount)+" WHERE ID=:REQUESTID", this._fileContentParams, null);
			} catch (Exception e) {
			}
		}
	}
	
	private StringBuilder _inlineSqlCommand=new StringBuilder();
	private String formatInlineSQLCommand(String inlinesqlCommand) {
		if(inlinesqlCommand==null) return "";
		if((inlinesqlCommand=inlinesqlCommand.trim()).equals("")) return inlinesqlCommand;
		this._inlineSqlCommand.setLength(0);
		String parameterName="";
		char prevChar=0;
		char endParamChar=' ';
		boolean readingParam=false;
		for(char isql:inlinesqlCommand.toCharArray()){
			if(readingParam){
				if(parameterName.length()>0&&endParamChar==']'&&isql==endParamChar){
					if(_currentFileFieldNames.indexOf(parameterName.toUpperCase().trim())>-1){
						this._inlineSqlCommand.append(":FIELD"+String.valueOf(_currentFileFieldNames.indexOf(parameterName.toUpperCase().trim())+1));
						
					}
					else{
						this._inlineSqlCommand.append(":["+parameterName+"]");
					}
					parameterName="";
					readingParam=false;
				}
				else if(parameterName.length()>0&&endParamChar!=']'){
					if((""+isql).trim().equals("")){
						this._inlineSqlCommand.append(":"+parameterName+isql);
						parameterName="";
						readingParam=false;
					}
					else{
						parameterName+=(""+isql);
					}
					if(_currentFileFieldNames.indexOf(parameterName.toUpperCase().trim())>-1){
						this._inlineSqlCommand.append(":FIELD"+String.valueOf(_currentFileFieldNames.indexOf(parameterName.toUpperCase().trim())+1));
						if(parameterName.trim().length()<parameterName.length()){
							this._inlineSqlCommand.append(parameterName.substring(parameterName.length()-1));
						}
						parameterName="";
						readingParam=false;
					}
				}
				else{
					if(prevChar==':'&&isql=='['){
						endParamChar=']';
					}
					else if(prevChar==':'&&isql!='['){
						endParamChar=' ';
						parameterName+=(""+isql);
					}
					else{
						parameterName+=(""+isql);
					}
				}
			}
			else{
				if(isql==':'){
					readingParam=true;
				}
				else{
					this._inlineSqlCommand.append(isql);
				}
			}
			prevChar=isql;
		}
		if(!parameterName.equals("")){
			this._inlineSqlCommand.append(":"+readingParam);
		}
		return this._inlineSqlCommand.substring(0, this._inlineSqlCommand.length());
	}
}
